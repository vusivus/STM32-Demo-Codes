
STM32 Demos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007220  08007220  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007228  08007228  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c54  20000060  08007290  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cb4  08007290  00024cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018822  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f3b  00000000  00000000  000388f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003c830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fee  00000000  00000000  0003dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac9e  00000000  00000000  0003ecfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ec6  00000000  00000000  0005999c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6744  00000000  00000000  00073862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005954  00000000  00000000  00119fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0011f8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007160 	.word	0x08007160

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007160 	.word	0x08007160

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a30:	f000 b970 	b.w	8000d14 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	460d      	mov	r5, r1
 8000a54:	4604      	mov	r4, r0
 8000a56:	460f      	mov	r7, r1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d14a      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5c:	428a      	cmp	r2, r1
 8000a5e:	4694      	mov	ip, r2
 8000a60:	d965      	bls.n	8000b2e <__udivmoddi4+0xe2>
 8000a62:	fab2 f382 	clz	r3, r2
 8000a66:	b143      	cbz	r3, 8000a7a <__udivmoddi4+0x2e>
 8000a68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a6c:	f1c3 0220 	rsb	r2, r3, #32
 8000a70:	409f      	lsls	r7, r3
 8000a72:	fa20 f202 	lsr.w	r2, r0, r2
 8000a76:	4317      	orrs	r7, r2
 8000a78:	409c      	lsls	r4, r3
 8000a7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a7e:	fa1f f58c 	uxth.w	r5, ip
 8000a82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a86:	0c22      	lsrs	r2, r4, #16
 8000a88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a90:	fb01 f005 	mul.w	r0, r1, r5
 8000a94:	4290      	cmp	r0, r2
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x62>
 8000a98:	eb1c 0202 	adds.w	r2, ip, r2
 8000a9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000aa0:	f080 811c 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	f240 8119 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000aaa:	3902      	subs	r1, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	b2a4      	uxth	r4, r4
 8000ab2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ab6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000abe:	fb00 f505 	mul.w	r5, r0, r5
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	d90a      	bls.n	8000adc <__udivmoddi4+0x90>
 8000ac6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ace:	f080 8107 	bcs.w	8000ce0 <__udivmoddi4+0x294>
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	f240 8104 	bls.w	8000ce0 <__udivmoddi4+0x294>
 8000ad8:	4464      	add	r4, ip
 8000ada:	3802      	subs	r0, #2
 8000adc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ae0:	1b64      	subs	r4, r4, r5
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	b11e      	cbz	r6, 8000aee <__udivmoddi4+0xa2>
 8000ae6:	40dc      	lsrs	r4, r3
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e9c6 4300 	strd	r4, r3, [r6]
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0xbc>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80ed 	beq.w	8000cd6 <__udivmoddi4+0x28a>
 8000afc:	2100      	movs	r1, #0
 8000afe:	e9c6 0500 	strd	r0, r5, [r6]
 8000b02:	4608      	mov	r0, r1
 8000b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b08:	fab3 f183 	clz	r1, r3
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d149      	bne.n	8000ba4 <__udivmoddi4+0x158>
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d302      	bcc.n	8000b1a <__udivmoddi4+0xce>
 8000b14:	4282      	cmp	r2, r0
 8000b16:	f200 80f8 	bhi.w	8000d0a <__udivmoddi4+0x2be>
 8000b1a:	1a84      	subs	r4, r0, r2
 8000b1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b20:	2001      	movs	r0, #1
 8000b22:	4617      	mov	r7, r2
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d0e2      	beq.n	8000aee <__udivmoddi4+0xa2>
 8000b28:	e9c6 4700 	strd	r4, r7, [r6]
 8000b2c:	e7df      	b.n	8000aee <__udivmoddi4+0xa2>
 8000b2e:	b902      	cbnz	r2, 8000b32 <__udivmoddi4+0xe6>
 8000b30:	deff      	udf	#255	; 0xff
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8090 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3c:	1a8a      	subs	r2, r1, r2
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2101      	movs	r1, #1
 8000b48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b50:	0c22      	lsrs	r2, r4, #16
 8000b52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b56:	fb0e f005 	mul.w	r0, lr, r5
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2b8>
 8000b6e:	4645      	mov	r5, r8
 8000b70:	1a12      	subs	r2, r2, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b78:	fb07 2210 	mls	r2, r7, r0, r2
 8000b7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x14e>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x14c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2c2>
 8000b98:	4610      	mov	r0, r2
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ba2:	e79f      	b.n	8000ae4 <__udivmoddi4+0x98>
 8000ba4:	f1c1 0720 	rsb	r7, r1, #32
 8000ba8:	408b      	lsls	r3, r1
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bba:	40fd      	lsrs	r5, r7
 8000bbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc0:	4323      	orrs	r3, r4
 8000bc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bc6:	fa1f fe8c 	uxth.w	lr, ip
 8000bca:	fb09 5518 	mls	r5, r9, r8, r5
 8000bce:	0c1c      	lsrs	r4, r3, #16
 8000bd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	fa02 f201 	lsl.w	r2, r2, r1
 8000bde:	fa00 f001 	lsl.w	r0, r0, r1
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1c 0404 	adds.w	r4, ip, r4
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2b4>
 8000bf0:	42a5      	cmp	r5, r4
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2b4>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4464      	add	r4, ip
 8000bfc:	1b64      	subs	r4, r4, r5
 8000bfe:	b29d      	uxth	r5, r3
 8000c00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c04:	fb09 4413 	mls	r4, r9, r3, r4
 8000c08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2ac>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2ac>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	4464      	add	r4, ip
 8000c26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	42ac      	cmp	r4, r5
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46ae      	mov	lr, r5
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x29c>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x298>
 8000c3c:	b156      	cbz	r6, 8000c54 <__udivmoddi4+0x208>
 8000c3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c42:	eb64 040e 	sbc.w	r4, r4, lr
 8000c46:	fa04 f707 	lsl.w	r7, r4, r7
 8000c4a:	40ca      	lsrs	r2, r1
 8000c4c:	40cc      	lsrs	r4, r1
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	e9c6 7400 	strd	r7, r4, [r6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5c:	f1c3 0120 	rsb	r1, r3, #32
 8000c60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c64:	fa20 f201 	lsr.w	r2, r0, r1
 8000c68:	fa25 f101 	lsr.w	r1, r5, r1
 8000c6c:	409d      	lsls	r5, r3
 8000c6e:	432a      	orrs	r2, r5
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c80:	0c11      	lsrs	r1, r2, #16
 8000c82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c86:	fb00 f50e 	mul.w	r5, r0, lr
 8000c8a:	428d      	cmp	r5, r1
 8000c8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x258>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b0>
 8000c9c:	428d      	cmp	r5, r1
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b0>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1b49      	subs	r1, r1, r5
 8000ca6:	b292      	uxth	r2, r2
 8000ca8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cac:	fb07 1115 	mls	r1, r7, r5, r1
 8000cb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cb8:	4291      	cmp	r1, r2
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x282>
 8000cbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2a8>
 8000cc6:	4291      	cmp	r1, r2
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2a8>
 8000cca:	3d02      	subs	r5, #2
 8000ccc:	4462      	add	r2, ip
 8000cce:	1a52      	subs	r2, r2, r1
 8000cd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0xfc>
 8000cd6:	4631      	mov	r1, r6
 8000cd8:	4630      	mov	r0, r6
 8000cda:	e708      	b.n	8000aee <__udivmoddi4+0xa2>
 8000cdc:	4639      	mov	r1, r7
 8000cde:	e6e6      	b.n	8000aae <__udivmoddi4+0x62>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	e6fb      	b.n	8000adc <__udivmoddi4+0x90>
 8000ce4:	4548      	cmp	r0, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf4:	4645      	mov	r5, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x282>
 8000cf8:	462b      	mov	r3, r5
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x258>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d04:	3d02      	subs	r5, #2
 8000d06:	4462      	add	r2, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e70a      	b.n	8000b24 <__udivmoddi4+0xd8>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x14e>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_ADC1_Init+0xa0>)
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d7a:	f000 fd01 	bl	8001780 <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d84:	f000 f994 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d9a:	f000 fe81 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000da4:	f000 f984 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	40012000 	.word	0x40012000
 8000db8:	0f000001 	.word	0x0f000001

08000dbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_ADC_MspInit+0x7c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d127      	bne.n	8000e2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_ADC_MspInit+0x80>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_ADC_MspInit+0x84>)
 8000e2a:	f001 f939 	bl	80020a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012000 	.word	0x40012000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of delayMutex */
  delayMutexHandle = osMutexNew(&delayMutex_attributes);
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <MX_FREERTOS_Init+0x34>)
 8000e4a:	f002 ffec 	bl	8003e26 <osMutexNew>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <MX_FREERTOS_Init+0x38>)
 8000e52:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <MX_FREERTOS_Init+0x3c>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	480a      	ldr	r0, [pc, #40]	; (8000e84 <MX_FREERTOS_Init+0x40>)
 8000e5a:	f002 ff37 	bl	8003ccc <osThreadNew>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <MX_FREERTOS_Init+0x44>)
 8000e62:	6013      	str	r3, [r2, #0]

  /* creation of myTask */
  myTaskHandle = osThreadNew(StartMyTask, NULL, &myTask_attributes);
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <MX_FREERTOS_Init+0x48>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <MX_FREERTOS_Init+0x4c>)
 8000e6a:	f002 ff2f 	bl	8003ccc <osThreadNew>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <MX_FREERTOS_Init+0x50>)
 8000e72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	080071f8 	.word	0x080071f8
 8000e7c:	200000cc 	.word	0x200000cc
 8000e80:	080071b0 	.word	0x080071b0
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	200000c4 	.word	0x200000c4
 8000e8c:	080071d4 	.word	0x080071d4
 8000e90:	08001605 	.word	0x08001605
 8000e94:	200000c8 	.word	0x200000c8

08000e98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f002 ffa5 	bl	8003df0 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <StartDefaultTask+0x8>

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a26      	ldr	r2, [pc, #152]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_GPIO_Init+0xd4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f34:	4812      	ldr	r0, [pc, #72]	; (8000f80 <MX_GPIO_Init+0xd8>)
 8000f36:	f001 fa4f 	bl	80023d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <MX_GPIO_Init+0xd8>)
 8000f54:	f001 f8a4 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_GPIO_Init+0xdc>)
 8000f6e:	f001 f897 	bl	80020a0 <HAL_GPIO_Init>

}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020400 	.word	0x40020400

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fb92 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f810 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f7ff ff88 	bl	8000ea8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000f98:	f000 f890 	bl	80010bc <MX_RTC_Init>
  MX_ADC1_Init();
 8000f9c:	f7ff febc 	bl	8000d18 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fa0:	f000 f9ae 	bl	8001300 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fa4:	f002 fe48 	bl	8003c38 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fa8:	f7ff ff4c 	bl	8000e44 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fac:	f002 fe68 	bl	8003c80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x28>
	...

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 ffe2 	bl	8006f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <SystemClock_Config+0xd0>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <SystemClock_Config+0xd0>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <SystemClock_Config+0xd0>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <SystemClock_Config+0xd4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <SystemClock_Config+0xd4>)
 8001002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <SystemClock_Config+0xd4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001014:	2305      	movs	r3, #5
 8001016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800101e:	2301      	movs	r3, #1
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001022:	2302      	movs	r3, #2
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800102c:	230a      	movs	r3, #10
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001030:	2350      	movs	r3, #80	; 0x50
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001038:	2304      	movs	r3, #4
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f9e3 	bl	800240c <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800104c:	f000 f830 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2102      	movs	r1, #2
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fc45 	bl	80028fc <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001078:	f000 f81a 	bl	80010b0 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3750      	adds	r7, #80	; 0x50
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109e:	f000 fb2b 	bl	80016f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40010000 	.word	0x40010000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010b8:	e7fe      	b.n	80010b8 <Error_Handler+0x8>
	...

080010bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_RTC_Init+0x44>)
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <MX_RTC_Init+0x48>)
 80010c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_RTC_Init+0x44>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_RTC_Init+0x44>)
 80010ce:	227f      	movs	r2, #127	; 0x7f
 80010d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_RTC_Init+0x44>)
 80010d4:	22ff      	movs	r2, #255	; 0xff
 80010d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_RTC_Init+0x44>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_RTC_Init+0x44>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_RTC_Init+0x44>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_RTC_Init+0x44>)
 80010ec:	f001 fef2 	bl	8002ed4 <HAL_RTC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80010f6:	f7ff ffdb 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000d0 	.word	0x200000d0
 8001104:	40002800 	.word	0x40002800

08001108 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <HAL_RTC_MspInit+0x50>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d111      	bne.n	800114e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800112a:	2302      	movs	r3, #2
 800112c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fddd 	bl	8002cf8 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001144:	f7ff ffb4 	bl	80010b0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_RTC_MspInit+0x54>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40002800 	.word	0x40002800
 800115c:	42470e3c 	.word	0x42470e3c

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_MspInit+0x54>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <HAL_MspInit+0x54>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_MspInit+0x54>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_MspInit+0x54>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_MspInit+0x54>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_MspInit+0x54>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	210f      	movs	r1, #15
 80011a2:	f06f 0001 	mvn.w	r0, #1
 80011a6:	f000 ff51 	bl	800204c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <HAL_InitTick+0xd0>)
 80011ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d0:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <HAL_InitTick+0xd0>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6453      	str	r3, [r2, #68]	; 0x44
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_InitTick+0xd0>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e4:	f107 020c 	add.w	r2, r7, #12
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fd50 	bl	8002c94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011f4:	f001 fd3a 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 80011f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <HAL_InitTick+0xd4>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0c9b      	lsrs	r3, r3, #18
 8001204:	3b01      	subs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <HAL_InitTick+0xd8>)
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <HAL_InitTick+0xdc>)
 800120c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_InitTick+0xd8>)
 8001210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001214:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_InitTick+0xd8>)
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_InitTick+0xd8>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_InitTick+0xd8>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_InitTick+0xd8>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800122e:	4818      	ldr	r0, [pc, #96]	; (8001290 <HAL_InitTick+0xd8>)
 8001230:	f001 ff4a 	bl	80030c8 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800123a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800123e:	2b00      	cmp	r3, #0
 8001240:	d11b      	bne.n	800127a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <HAL_InitTick+0xd8>)
 8001244:	f001 ffea 	bl	800321c <HAL_TIM_Base_Start_IT>
 8001248:	4603      	mov	r3, r0
 800124a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800124e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001256:	2019      	movs	r0, #25
 8001258:	f000 ff14 	bl	8002084 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d808      	bhi.n	8001274 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001262:	2200      	movs	r2, #0
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	2019      	movs	r0, #25
 8001268:	f000 fef0 	bl	800204c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_InitTick+0xe0>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e002      	b.n	800127a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800127e:	4618      	mov	r0, r3
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	431bde83 	.word	0x431bde83
 8001290:	200000f0 	.word	0x200000f0
 8001294:	40010000 	.word	0x40010000
 8001298:	20000004 	.word	0x20000004

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012ce:	f002 f807 	bl	80032e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000f0 	.word	0x200000f0

080012dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132c:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <MX_TIM2_Init+0xc4>)
 800132e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_TIM2_Init+0xc4>)
 8001336:	224f      	movs	r2, #79	; 0x4f
 8001338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_TIM2_Init+0xc4>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_TIM2_Init+0xc4>)
 8001342:	f04f 32ff 	mov.w	r2, #4294967295
 8001346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_TIM2_Init+0xc4>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM2_Init+0xc4>)
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001354:	481b      	ldr	r0, [pc, #108]	; (80013c4 <MX_TIM2_Init+0xc4>)
 8001356:	f001 feb7 	bl	80030c8 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001360:	f7ff fea6 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4619      	mov	r1, r3
 8001370:	4814      	ldr	r0, [pc, #80]	; (80013c4 <MX_TIM2_Init+0xc4>)
 8001372:	f002 f8bd 	bl	80034f0 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800137c:	f7ff fe98 	bl	80010b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001380:	2304      	movs	r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_TIM2_Init+0xc4>)
 8001390:	f002 f975 	bl	800367e <HAL_TIM_SlaveConfigSynchro>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800139a:	f7ff fe89 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_TIM2_Init+0xc4>)
 80013ac:	f002 fb7e 	bl	8003aac <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80013b6:	f7ff fe7b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3730      	adds	r7, #48	; 0x30
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000138 	.word	0x20000138

080013c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d8:	d10d      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_TIM_Base_MspInit+0x3c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001432:	f7ff ff53 	bl	80012dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f005 fe07 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff fda5 	bl	8000f88 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800144c:	08007230 	.word	0x08007230
  ldr r2, =_sbss
 8001450:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001454:	20004cb4 	.word	0x20004cb4

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <Read_Button>:
#include "drv_timer.h"

bool led_state = false;
float sensorValue;

static bool Read_Button(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET) {
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <Read_Button+0x34>)
 8001466:	f000 ff9f 	bl	80023a8 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10c      	bne.n	800148a <Read_Button+0x2e>
		HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f000 f961 	bl	8001738 <HAL_Delay>
		if (HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET) {
 8001476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <Read_Button+0x34>)
 800147c:	f000 ff94 	bl	80023a8 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <Read_Button+0x2e>
			return true;
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <Read_Button+0x30>
		}
	}
	return false;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020400 	.word	0x40020400

08001494 <LED_SetState>:

static void LED_SetState(bool state) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, state);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	461a      	mov	r2, r3
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <LED_SetState+0x20>)
 80014a8:	f000 ff96 	bl	80023d8 <HAL_GPIO_WritePin>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020800 	.word	0x40020800

080014b8 <ADC_SelectChannel>:

static void ADC_SelectChannel(uint32_t channel) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]

	sConfig.Channel = channel;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <ADC_SelectChannel+0x40>)
 80014e2:	f000 fadd 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <ADC_SelectChannel+0x38>
		Error_Handler();
 80014ec:	f7ff fde0 	bl	80010b0 <Error_Handler>
	}
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000007c 	.word	0x2000007c
 80014fc:	00000000 	.word	0x00000000

08001500 <Read_Voltage>:

static float Read_Voltage(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
	ADC_SelectChannel(ADC_CHANNEL_0);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff ffd6 	bl	80014b8 <ADC_SelectChannel>

	HAL_StatusTypeDef status;
	HAL_ADC_Start(&hadc1);
 800150c:	4822      	ldr	r0, [pc, #136]	; (8001598 <Read_Voltage+0x98>)
 800150e:	f000 f97b 	bl	8001808 <HAL_ADC_Start>

	do {
		status = HAL_ADC_PollForConversion(&hadc1, 10);
 8001512:	210a      	movs	r1, #10
 8001514:	4820      	ldr	r0, [pc, #128]	; (8001598 <Read_Voltage+0x98>)
 8001516:	f000 fa2b 	bl	8001970 <HAL_ADC_PollForConversion>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
	} while (status == HAL_BUSY);
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d0f6      	beq.n	8001512 <Read_Voltage+0x12>

	if (status == HAL_OK) {
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d125      	bne.n	8001576 <Read_Voltage+0x76>
		uint32_t value = HAL_ADC_GetValue(&hadc1);
 800152a:	481b      	ldr	r0, [pc, #108]	; (8001598 <Read_Voltage+0x98>)
 800152c:	f000 faab 	bl	8001a86 <HAL_ADC_GetValue>
 8001530:	60b8      	str	r0, [r7, #8]
		float voltage = value / 4095.0;
 8001532:	68b8      	ldr	r0, [r7, #8]
 8001534:	f7fe ff96 	bl	8000464 <__aeabi_ui2d>
 8001538:	a313      	add	r3, pc, #76	; (adr r3, 8001588 <Read_Voltage+0x88>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff f935 	bl	80007ac <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fa17 	bl	800097c <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	607b      	str	r3, [r7, #4]

		voltage *= 3.3;
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7fe ffa8 	bl	80004a8 <__aeabi_f2d>
 8001558:	a30d      	add	r3, pc, #52	; (adr r3, 8001590 <Read_Voltage+0x90>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe fffb 	bl	8000558 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa07 	bl	800097c <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	607b      	str	r3, [r7, #4]

		return voltage;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	e000      	b.n	8001578 <Read_Voltage+0x78>
	}

	return -1;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <Read_Voltage+0x9c>)
}
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	00000000 	.word	0x00000000
 800158c:	40affe00 	.word	0x40affe00
 8001590:	66666666 	.word	0x66666666
 8001594:	400a6666 	.word	0x400a6666
 8001598:	2000007c 	.word	0x2000007c
 800159c:	bf800000 	.word	0xbf800000

080015a0 <App_Initialize>:

void App_Initialize(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	Timer_Initialize();
 80015a4:	f000 f83a 	bl	800161c <Timer_Initialize>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <App_Update>:

void App_Update(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if (Read_Button()) {
 80015b0:	f7ff ff54 	bl	800145c <Read_Button>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01a      	beq.n	80015f0 <App_Update+0x44>
		led_state = !led_state;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <App_Update+0x50>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f083 0301 	eor.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <App_Update+0x50>)
 80015d6:	701a      	strb	r2, [r3, #0]
		LED_SetState(led_state);
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <App_Update+0x50>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff59 	bl	8001494 <LED_SetState>

		sensorValue = Read_Voltage();
 80015e2:	f7ff ff8d 	bl	8001500 <Read_Voltage>
 80015e6:	eef0 7a40 	vmov.f32	s15, s0
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <App_Update+0x54>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
	}

	DelayMs(50);
 80015f0:	2032      	movs	r0, #50	; 0x32
 80015f2:	f000 f837 	bl	8001664 <DelayMs>
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000180 	.word	0x20000180
 8001600:	20000184 	.word	0x20000184

08001604 <StartMyTask>:

void StartMyTask(void *argument) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

	App_Initialize();
 800160c:	f7ff ffc8 	bl	80015a0 <App_Initialize>

	for (;;) {
		App_Update();
 8001610:	f7ff ffcc 	bl	80015ac <App_Update>
		osDelay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f002 fbeb 	bl	8003df0 <osDelay>
		App_Update();
 800161a:	e7f9      	b.n	8001610 <StartMyTask+0xc>

0800161c <Timer_Initialize>:
#include "tim.h"
#include "cmsis_os.h"

extern osMutexId_t delayMutexHandle;

void Timer_Initialize(void){
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <Timer_Initialize+0x10>)
 8001622:	f001 fda1 	bl	8003168 <HAL_TIM_Base_Start>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000138 	.word	0x20000138

08001630 <DelayUs>:

uint16_t Timer_GetUs(void) {
	return __HAL_TIM_GET_COUNTER(&htim2);
}

void DelayUs(volatile uint32_t microseconds) {
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <DelayUs+0x30>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) - start < microseconds)
 8001640:	bf00      	nop
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <DelayUs+0x30>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad2      	subs	r2, r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3f7      	bcc.n	8001642 <DelayUs+0x12>
		;
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000138 	.word	0x20000138

08001664 <DelayMs>:

void DelayMs(uint32_t milliseconds) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	osMutexAcquire(delayMutexHandle, portMAX_DELAY);
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <DelayMs+0x48>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	4618      	mov	r0, r3
 8001676:	f002 fc5c 	bl	8003f32 <osMutexAcquire>

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <DelayMs+0x4c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24

	while (milliseconds > 0) {
 8001682:	e006      	b.n	8001692 <DelayMs+0x2e>
		DelayUs(1000);
 8001684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001688:	f7ff ffd2 	bl	8001630 <DelayUs>
		milliseconds--;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
	while (milliseconds > 0) {
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f5      	bne.n	8001684 <DelayMs+0x20>
	}

	osMutexRelease(delayMutexHandle);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <DelayMs+0x48>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fc93 	bl	8003fc8 <osMutexRelease>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000cc 	.word	0x200000cc
 80016b0:	20000138 	.word	0x20000138

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_Init+0x40>)
 80016be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_Init+0x40>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x40>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 fcaa 	bl	8002036 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f7ff fd68 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fd3a 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023c00 	.word	0x40023c00

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20000188 	.word	0x20000188

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000188 	.word	0x20000188

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e033      	b.n	80017fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fb0c 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c6:	f023 0302 	bic.w	r3, r3, #2
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fa86 	bl	8001ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
 80017ee:	e001      	b.n	80017f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Start+0x1a>
 800181e:	2302      	movs	r3, #2
 8001820:	e097      	b.n	8001952 <HAL_ADC_Start+0x14a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d018      	beq.n	800186a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001848:	4b45      	ldr	r3, [pc, #276]	; (8001960 <HAL_ADC_Start+0x158>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a45      	ldr	r2, [pc, #276]	; (8001964 <HAL_ADC_Start+0x15c>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9a      	lsrs	r2, r3, #18
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	3b01      	subs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f9      	bne.n	800185e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d15f      	bne.n	8001938 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018b6:	d106      	bne.n	80018c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f023 0206 	bic.w	r2, r3, #6
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_ADC_Start+0x160>)
 80018d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018e0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d129      	bne.n	8001950 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e020      	b.n	8001950 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_ADC_Start+0x164>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d11b      	bne.n	8001950 <HAL_ADC_Start+0x148>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d114      	bne.n	8001950 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	e00b      	b.n	8001950 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f043 0210 	orr.w	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000
 8001964:	431bde83 	.word	0x431bde83
 8001968:	40012300 	.word	0x40012300
 800196c:	40012000 	.word	0x40012000

08001970 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198c:	d113      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199c:	d10b      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e063      	b.n	8001a7e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019b6:	f7ff feb3 	bl	8001720 <HAL_GetTick>
 80019ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019bc:	e021      	b.n	8001a02 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d01d      	beq.n	8001a02 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_ADC_PollForConversion+0x6c>
 80019cc:	f7ff fea8 	bl	8001720 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d212      	bcs.n	8001a02 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d00b      	beq.n	8001a02 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f043 0204 	orr.w	r2, r3, #4
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e03d      	b.n	8001a7e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d1d6      	bne.n	80019be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0212 	mvn.w	r2, #18
 8001a18:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d123      	bne.n	8001a7c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11f      	bne.n	8001a7c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d111      	bne.n	8001a7c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x1c>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e105      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x228>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d925      	bls.n	8001b18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b1e      	subs	r3, #30
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	400a      	ands	r2, r1
 8001af0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4403      	add	r3, r0
 8001b0a:	3b1e      	subs	r3, #30
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	e022      	b.n	8001b5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6919      	ldr	r1, [r3, #16]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4403      	add	r3, r0
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d824      	bhi.n	8001bb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b05      	subs	r3, #5
 8001b78:	221f      	movs	r2, #31
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b05      	subs	r3, #5
 8001ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
 8001bae:	e04c      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d824      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b23      	subs	r3, #35	; 0x23
 8001bca:	221f      	movs	r2, #31
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b23      	subs	r3, #35	; 0x23
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001c00:	e023      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b41      	subs	r3, #65	; 0x41
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b41      	subs	r3, #65	; 0x41
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_ADC_ConfigChannel+0x234>)
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_ADC_ConfigChannel+0x238>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d109      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1cc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_ADC_ConfigChannel+0x238>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d123      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x21e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d003      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x1e6>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d11b      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d111      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_ADC_ConfigChannel+0x23c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_ADC_ConfigChannel+0x240>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	0c9a      	lsrs	r2, r3, #18
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40012300 	.word	0x40012300
 8001cd8:	40012000 	.word	0x40012000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <ADC_Init+0x1f0>)
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	021a      	lsls	r2, r3, #8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6899      	ldr	r1, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <ADC_Init+0x1f4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d022      	beq.n	8001dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e00f      	b.n	8001de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0202 	bic.w	r2, r2, #2
 8001df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
 8001dfc:	005a      	lsls	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	035a      	lsls	r2, r3, #13
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e007      	b.n	8001e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	051a      	lsls	r2, r3, #20
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9a:	025a      	lsls	r2, r3, #9
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	029a      	lsls	r2, r3, #10
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40012300 	.word	0x40012300
 8001ed8:	0f000001 	.word	0x0f000001

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff4c 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205e:	f7ff ff61 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002062:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7ff ffb1 	bl	8001fd0 <NVIC_EncodePriority>
 800206e:	4602      	mov	r2, r0
 8002070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff80 	bl	8001f7c <__NVIC_SetPriority>
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff54 	bl	8001f40 <__NVIC_EnableIRQ>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e159      	b.n	8002370 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8148 	bne.w	800236a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d005      	beq.n	80020f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d130      	bne.n	8002154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002128:	2201      	movs	r2, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b03      	cmp	r3, #3
 800215e:	d017      	beq.n	8002190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d123      	bne.n	80021e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	69b9      	ldr	r1, [r7, #24]
 80021e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	2203      	movs	r2, #3
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a2 	beq.w	800236a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b57      	ldr	r3, [pc, #348]	; (8002388 <HAL_GPIO_Init+0x2e8>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a56      	ldr	r2, [pc, #344]	; (8002388 <HAL_GPIO_Init+0x2e8>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b54      	ldr	r3, [pc, #336]	; (8002388 <HAL_GPIO_Init+0x2e8>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002242:	4a52      	ldr	r2, [pc, #328]	; (800238c <HAL_GPIO_Init+0x2ec>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a49      	ldr	r2, [pc, #292]	; (8002390 <HAL_GPIO_Init+0x2f0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x202>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a48      	ldr	r2, [pc, #288]	; (8002394 <HAL_GPIO_Init+0x2f4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x1fe>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a47      	ldr	r2, [pc, #284]	; (8002398 <HAL_GPIO_Init+0x2f8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x1fa>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a46      	ldr	r2, [pc, #280]	; (800239c <HAL_GPIO_Init+0x2fc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x1f6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a45      	ldr	r2, [pc, #276]	; (80023a0 <HAL_GPIO_Init+0x300>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x1f2>
 800228e:	2304      	movs	r3, #4
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 8002292:	2307      	movs	r3, #7
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x204>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x2ec>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_GPIO_Init+0x304>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <HAL_GPIO_Init+0x304>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_GPIO_Init+0x304>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_GPIO_Init+0x304>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_GPIO_Init+0x304>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f aea2 	bls.w	80020bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40013c00 	.word	0x40013c00

080023a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e001      	b.n	80023ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
 80023e4:	4613      	mov	r3, r2
 80023e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e8:	787b      	ldrb	r3, [r7, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f4:	e003      	b.n	80023fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023f6:	887b      	ldrh	r3, [r7, #2]
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	619a      	str	r2, [r3, #24]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e267      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d075      	beq.n	8002516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x240>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d00c      	beq.n	8002450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b85      	ldr	r3, [pc, #532]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243e:	2b08      	cmp	r3, #8
 8002440:	d112      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4b7e      	ldr	r3, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05b      	beq.n	8002514 <HAL_RCC_OscConfig+0x108>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d157      	bne.n	8002514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e242      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x74>
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a75      	ldr	r2, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0xb0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x98>
 800248a:	4b70      	ldr	r3, [pc, #448]	; (800264c <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6f      	ldr	r2, [pc, #444]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6c      	ldr	r2, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xb0>
 80024a4:	4b69      	ldr	r3, [pc, #420]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a68      	ldr	r2, [pc, #416]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff f92c 	bl	8001720 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff f928 	bl	8001720 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e207      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b5b      	ldr	r3, [pc, #364]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xc0>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff f918 	bl	8001720 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff f914 	bl	8001720 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1f3      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0xe8>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	4b4a      	ldr	r3, [pc, #296]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d11c      	bne.n	8002574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b44      	ldr	r3, [pc, #272]	; (800264c <HAL_RCC_OscConfig+0x240>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d116      	bne.n	8002574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x152>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e1c7      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x240>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	e03a      	b.n	80025ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_OscConfig+0x244>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff f8cd 	bl	8001720 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7ff f8c9 	bl	8001720 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1a8      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4925      	ldr	r1, [pc, #148]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_OscConfig+0x244>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff f8ac 	bl	8001720 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025cc:	f7ff f8a8 	bl	8001720 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e187      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d036      	beq.n	8002664 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <HAL_RCC_OscConfig+0x248>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7ff f88c 	bl	8001720 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260c:	f7ff f888 	bl	8001720 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e167      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_OscConfig+0x240>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x200>
 800262a:	e01b      	b.n	8002664 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x248>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff f875 	bl	8001720 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	e00e      	b.n	8002658 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff f871 	bl	8001720 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d907      	bls.n	8002658 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e150      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
 800264c:	40023800 	.word	0x40023800
 8002650:	42470000 	.word	0x42470000
 8002654:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800265a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ea      	bne.n	800263a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8097 	beq.w	80027a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b81      	ldr	r3, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b7d      	ldr	r3, [pc, #500]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a7c      	ldr	r2, [pc, #496]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b7a      	ldr	r3, [pc, #488]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b77      	ldr	r3, [pc, #476]	; (8002880 <HAL_RCC_OscConfig+0x474>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b74      	ldr	r3, [pc, #464]	; (8002880 <HAL_RCC_OscConfig+0x474>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a73      	ldr	r2, [pc, #460]	; (8002880 <HAL_RCC_OscConfig+0x474>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7ff f831 	bl	8001720 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7ff f82d 	bl	8001720 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e10c      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x474>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x2ea>
 80026e8:	4b64      	ldr	r3, [pc, #400]	; (800287c <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a63      	ldr	r2, [pc, #396]	; (800287c <HAL_RCC_OscConfig+0x470>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	e01c      	b.n	8002730 <HAL_RCC_OscConfig+0x324>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b05      	cmp	r3, #5
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x30c>
 80026fe:	4b5f      	ldr	r3, [pc, #380]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a5e      	ldr	r2, [pc, #376]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	4b5c      	ldr	r3, [pc, #368]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a5b      	ldr	r2, [pc, #364]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0x324>
 8002718:	4b58      	ldr	r3, [pc, #352]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a57      	ldr	r2, [pc, #348]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	4b55      	ldr	r3, [pc, #340]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a54      	ldr	r2, [pc, #336]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d015      	beq.n	8002764 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fff2 	bl	8001720 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe ffee 	bl	8001720 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0cb      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ee      	beq.n	8002740 <HAL_RCC_OscConfig+0x334>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe ffdc 	bl	8001720 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe ffd8 	bl	8001720 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0b5      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1ee      	bne.n	800276c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002794:	4b39      	ldr	r3, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a38      	ldr	r2, [pc, #224]	; (800287c <HAL_RCC_OscConfig+0x470>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a1 	beq.w	80028ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027aa:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_RCC_OscConfig+0x470>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d05c      	beq.n	8002870 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d141      	bne.n	8002842 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_RCC_OscConfig+0x478>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe ffac 	bl	8001720 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe ffa8 	bl	8001720 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e087      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x470>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	3b01      	subs	r3, #1
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	491b      	ldr	r1, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x478>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe ff81 	bl	8001720 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002822:	f7fe ff7d 	bl	8001720 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e05c      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x416>
 8002840:	e054      	b.n	80028ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x478>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe ff6a 	bl	8001720 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe ff66 	bl	8001720 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e045      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_OscConfig+0x470>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x444>
 800286e:	e03d      	b.n	80028ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e038      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
 800287c:	40023800 	.word	0x40023800
 8002880:	40007000 	.word	0x40007000
 8002884:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d028      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d121      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d11a      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d111      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	3b01      	subs	r3, #1
 80028d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0cc      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d90c      	bls.n	8002938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800295a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d044      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d119      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e067      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fe98 	bl	8001720 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe fe94 	bl	8001720 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e04f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d20c      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fb88 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023c00 	.word	0x40023c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08007208 	.word	0x08007208
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002acc:	b090      	sub	sp, #64	; 0x40
 8002ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad8:	2300      	movs	r3, #0
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d00d      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x40>
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	f200 80a1 	bhi.w	8002c34 <HAL_RCC_GetSysClockFreq+0x16c>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x34>
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afa:	e09b      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b00:	e09b      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b02:	4b53      	ldr	r3, [pc, #332]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b06:	e098      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b12:	4b4d      	ldr	r3, [pc, #308]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d028      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	099b      	lsrs	r3, r3, #6
 8002b24:	2200      	movs	r2, #0
 8002b26:	623b      	str	r3, [r7, #32]
 8002b28:	627a      	str	r2, [r7, #36]	; 0x24
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b30:	2100      	movs	r1, #0
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b34:	fb03 f201 	mul.w	r2, r3, r1
 8002b38:	2300      	movs	r3, #0
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b42:	fba0 1202 	umull	r1, r2, r0, r2
 8002b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b48:	460a      	mov	r2, r1
 8002b4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4e:	4413      	add	r3, r2
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	2200      	movs	r2, #0
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	61fa      	str	r2, [r7, #28]
 8002b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b62:	f7fd ff5b 	bl	8000a1c <__aeabi_uldivmod>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6e:	e053      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	2200      	movs	r2, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	617a      	str	r2, [r7, #20]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b82:	f04f 0b00 	mov.w	fp, #0
 8002b86:	4652      	mov	r2, sl
 8002b88:	465b      	mov	r3, fp
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b98:	0150      	lsls	r0, r2, #5
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	ebb2 080a 	subs.w	r8, r2, sl
 8002ba2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bba:	ebb2 0408 	subs.w	r4, r2, r8
 8002bbe:	eb63 0509 	sbc.w	r5, r3, r9
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	00eb      	lsls	r3, r5, #3
 8002bcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd0:	00e2      	lsls	r2, r4, #3
 8002bd2:	4614      	mov	r4, r2
 8002bd4:	461d      	mov	r5, r3
 8002bd6:	eb14 030a 	adds.w	r3, r4, sl
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	eb45 030b 	adc.w	r3, r5, fp
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	028b      	lsls	r3, r1, #10
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	028a      	lsls	r2, r1, #10
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	2200      	movs	r2, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	60fa      	str	r2, [r7, #12]
 8002c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c0c:	f7fd ff06 	bl	8000a1c <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3740      	adds	r7, #64	; 0x40
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	01312d00 	.word	0x01312d00

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0b5b      	lsrs	r3, r3, #13
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08007218 	.word	0x08007218

08002c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCC_GetClockConfig+0x60>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0207 	and.w	r2, r3, #7
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40023c00 	.word	0x40023c00

08002cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d035      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d20:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d26:	f7fe fcfb 	bl	8001720 <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d2e:	f7fe fcf7 	bl	8001720 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0ba      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d40:	4b60      	ldr	r3, [pc, #384]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	019a      	lsls	r2, r3, #6
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	071b      	lsls	r3, r3, #28
 8002d58:	495a      	ldr	r1, [pc, #360]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d60:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d66:	f7fe fcdb 	bl	8001720 <HAL_GetTick>
 8002d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d6e:	f7fe fcd7 	bl	8001720 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e09a      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8083 	beq.w	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b49      	ldr	r3, [pc, #292]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a48      	ldr	r2, [pc, #288]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dc2:	f7fe fcad 	bl	8001720 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fe fca9 	bl	8001720 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e06c      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02f      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d028      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e10:	4b2e      	ldr	r3, [pc, #184]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e1c:	4a29      	ldr	r2, [pc, #164]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d114      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fc77 	bl	8001720 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe fc73 	bl	8001720 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e034      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ee      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	4912      	ldr	r1, [pc, #72]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e8c:	6093      	str	r3, [r2, #8]
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7c1a      	ldrb	r2, [r3, #16]
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002eb2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	42470068 	.word	0x42470068
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42470e40 	.word	0x42470e40
 8002ed0:	424711e0 	.word	0x424711e0

08002ed4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e066      	b.n	8002fb8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7f5b      	ldrb	r3, [r3, #29]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe f904 	bl	8001108 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	22ca      	movs	r2, #202	; 0xca
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2253      	movs	r2, #83	; 0x53
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f87a 	bl	8003010 <RTC_EnterInitMode>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12c      	bne.n	8002f80 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f38:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68d2      	ldr	r2, [r2, #12]
 8002f60:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6919      	ldr	r1, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	041a      	lsls	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f881 	bl	800307e <RTC_ExitInitMode>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d113      	bne.n	8002fae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fda:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7fe fba0 	bl	8001720 <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002fe2:	e009      	b.n	8002ff8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fe4:	f7fe fb9c 	bl	8001720 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e007      	b.n	8003008 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d122      	bne.n	8003074 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800303c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800303e:	f7fe fb6f 	bl	8001720 <HAL_GetTick>
 8003042:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003044:	e00c      	b.n	8003060 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003046:	f7fe fb6b 	bl	8001720 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003054:	d904      	bls.n	8003060 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <RTC_EnterInitMode+0x64>
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d1e8      	bne.n	8003046 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b084      	sub	sp, #16
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff ff89 	bl	8002fc0 <HAL_RTC_WaitForSynchro>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2204      	movs	r2, #4
 80030b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e041      	b.n	800315e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe f96a 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fb24 	bl	8003754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e03c      	b.n	80031fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <HAL_TIM_Base_Start+0xa0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_TIM_Base_Start+0x5c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319a:	d013      	beq.n	80031c4 <HAL_TIM_Base_Start+0x5c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_TIM_Base_Start+0xa4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_Base_Start+0x5c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_TIM_Base_Start+0xa8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_Base_Start+0x5c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_TIM_Base_Start+0xac>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_Base_Start+0x5c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <HAL_TIM_Base_Start+0xb0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d111      	bne.n	80031e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d010      	beq.n	80031f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e6:	e007      	b.n	80031f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40014000 	.word	0x40014000

0800321c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d001      	beq.n	8003234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e044      	b.n	80032be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x6c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d013      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x6c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x6c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x6c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x6c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d111      	bne.n	80032ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d010      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	e007      	b.n	80032bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40014000 	.word	0x40014000

080032e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0202 	mvn.w	r2, #2
 800330c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9f7 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f9e9 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f9fa 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0204 	mvn.w	r2, #4
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9cd 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f9bf 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f9d0 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b08      	cmp	r3, #8
 800339c:	d122      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d11b      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0208 	mvn.w	r2, #8
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9a3 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f995 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f9a6 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d122      	bne.n	8003438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d11b      	bne.n	8003438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0210 	mvn.w	r2, #16
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2208      	movs	r2, #8
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f979 	bl	8003716 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f96b 	bl	8003702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f97c 	bl	800372a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10e      	bne.n	8003464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0201 	mvn.w	r2, #1
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd fe14 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d107      	bne.n	8003490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fb86 	bl	8003b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d10e      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d107      	bne.n	80034bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f941 	bl	800373e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d10e      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d107      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0220 	mvn.w	r2, #32
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fb50 	bl	8003b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_TIM_ConfigClockSource+0x1c>
 8003508:	2302      	movs	r3, #2
 800350a:	e0b4      	b.n	8003676 <HAL_TIM_ConfigClockSource+0x186>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800352a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d03e      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354a:	f200 8087 	bhi.w	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800354e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003552:	f000 8086 	beq.w	8003662 <HAL_TIM_ConfigClockSource+0x172>
 8003556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355a:	d87f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800355c:	2b70      	cmp	r3, #112	; 0x70
 800355e:	d01a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xa6>
 8003560:	2b70      	cmp	r3, #112	; 0x70
 8003562:	d87b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003564:	2b60      	cmp	r3, #96	; 0x60
 8003566:	d050      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x11a>
 8003568:	2b60      	cmp	r3, #96	; 0x60
 800356a:	d877      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800356c:	2b50      	cmp	r3, #80	; 0x50
 800356e:	d03c      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0xfa>
 8003570:	2b50      	cmp	r3, #80	; 0x50
 8003572:	d873      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d058      	beq.n	800362a <HAL_TIM_ConfigClockSource+0x13a>
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d86f      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800357c:	2b30      	cmp	r3, #48	; 0x30
 800357e:	d064      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003580:	2b30      	cmp	r3, #48	; 0x30
 8003582:	d86b      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b20      	cmp	r3, #32
 8003586:	d060      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003588:	2b20      	cmp	r3, #32
 800358a:	d867      	bhi.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05c      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003590:	2b10      	cmp	r3, #16
 8003592:	d05a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x15a>
 8003594:	e062      	b.n	800365c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f000 fa60 	bl	8003a6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
      break;
 80035c2:	e04f      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f000 fa49 	bl	8003a6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e6:	609a      	str	r2, [r3, #8]
      break;
 80035e8:	e03c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 f9bd 	bl	8003976 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2150      	movs	r1, #80	; 0x50
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fa16 	bl	8003a34 <TIM_ITRx_SetConfig>
      break;
 8003608:	e02c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	461a      	mov	r2, r3
 8003618:	f000 f9dc 	bl	80039d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2160      	movs	r1, #96	; 0x60
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fa06 	bl	8003a34 <TIM_ITRx_SetConfig>
      break;
 8003628:	e01c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	461a      	mov	r2, r3
 8003638:	f000 f99d 	bl	8003976 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2140      	movs	r1, #64	; 0x40
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f9f6 	bl	8003a34 <TIM_ITRx_SetConfig>
      break;
 8003648:	e00c      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f000 f9ed 	bl	8003a34 <TIM_ITRx_SetConfig>
      break;
 800365a:	e003      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	e000      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003692:	2302      	movs	r3, #2
 8003694:	e031      	b.n	80036fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8d3 	bl	8003854 <TIM_SlaveTimer_SetConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e018      	b.n	80036fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a34      	ldr	r2, [pc, #208]	; (8003838 <TIM_Base_SetConfig+0xe4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00f      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d00b      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a31      	ldr	r2, [pc, #196]	; (800383c <TIM_Base_SetConfig+0xe8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d007      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a30      	ldr	r2, [pc, #192]	; (8003840 <TIM_Base_SetConfig+0xec>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_Base_SetConfig+0x38>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2f      	ldr	r2, [pc, #188]	; (8003844 <TIM_Base_SetConfig+0xf0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a25      	ldr	r2, [pc, #148]	; (8003838 <TIM_Base_SetConfig+0xe4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01b      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d017      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <TIM_Base_SetConfig+0xe8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a21      	ldr	r2, [pc, #132]	; (8003840 <TIM_Base_SetConfig+0xec>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a20      	ldr	r2, [pc, #128]	; (8003844 <TIM_Base_SetConfig+0xf0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <TIM_Base_SetConfig+0xf4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1e      	ldr	r2, [pc, #120]	; (800384c <TIM_Base_SetConfig+0xf8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <TIM_Base_SetConfig+0xfc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <TIM_Base_SetConfig+0xe4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d103      	bne.n	8003824 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003870:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f023 0307 	bic.w	r3, r3, #7
 8003882:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b70      	cmp	r3, #112	; 0x70
 800389c:	d01a      	beq.n	80038d4 <TIM_SlaveTimer_SetConfig+0x80>
 800389e:	2b70      	cmp	r3, #112	; 0x70
 80038a0:	d860      	bhi.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
 80038a2:	2b60      	cmp	r3, #96	; 0x60
 80038a4:	d054      	beq.n	8003950 <TIM_SlaveTimer_SetConfig+0xfc>
 80038a6:	2b60      	cmp	r3, #96	; 0x60
 80038a8:	d85c      	bhi.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
 80038aa:	2b50      	cmp	r3, #80	; 0x50
 80038ac:	d046      	beq.n	800393c <TIM_SlaveTimer_SetConfig+0xe8>
 80038ae:	2b50      	cmp	r3, #80	; 0x50
 80038b0:	d858      	bhi.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d019      	beq.n	80038ea <TIM_SlaveTimer_SetConfig+0x96>
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d854      	bhi.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
 80038ba:	2b30      	cmp	r3, #48	; 0x30
 80038bc:	d055      	beq.n	800396a <TIM_SlaveTimer_SetConfig+0x116>
 80038be:	2b30      	cmp	r3, #48	; 0x30
 80038c0:	d850      	bhi.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d051      	beq.n	800396a <TIM_SlaveTimer_SetConfig+0x116>
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d84c      	bhi.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04d      	beq.n	800396a <TIM_SlaveTimer_SetConfig+0x116>
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d04b      	beq.n	800396a <TIM_SlaveTimer_SetConfig+0x116>
 80038d2:	e047      	b.n	8003964 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68d9      	ldr	r1, [r3, #12]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f000 f8c1 	bl	8003a6a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80038e8:	e040      	b.n	800396c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d101      	bne.n	80038f6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e03b      	b.n	800396e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	4313      	orrs	r3, r2
 8003928:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
      break;
 800393a:	e017      	b.n	800396c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	461a      	mov	r2, r3
 800394a:	f000 f814 	bl	8003976 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800394e:	e00d      	b.n	800396c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	461a      	mov	r2, r3
 800395e:	f000 f839 	bl	80039d4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003962:	e003      	b.n	800396c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
      break;
 8003968:	e000      	b.n	800396c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800396a:	bf00      	nop
  }

  return status;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003976:	b480      	push	{r7}
 8003978:	b087      	sub	sp, #28
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f023 0201 	bic.w	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 030a 	bic.w	r3, r3, #10
 80039b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f023 0210 	bic.w	r2, r3, #16
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	031b      	lsls	r3, r3, #12
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f043 0307 	orr.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	609a      	str	r2, [r3, #8]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e050      	b.n	8003b66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d018      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b10:	d013      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d009      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10c      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40014000 	.word	0x40014000

08003b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <__NVIC_SetPriority>:
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	db0a      	blt.n	8003bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	490c      	ldr	r1, [pc, #48]	; (8003bfc <__NVIC_SetPriority+0x4c>)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bd8:	e00a      	b.n	8003bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <__NVIC_SetPriority+0x50>)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	3b04      	subs	r3, #4
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	440b      	add	r3, r1
 8003bee:	761a      	strb	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e100 	.word	0xe000e100
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <SysTick_Handler+0x1c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c0c:	f002 f85a 	bl	8005cc4 <xTaskGetSchedulerState>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c16:	f002 ff3f 	bl	8006a98 <xPortSysTickHandler>
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000e010 	.word	0xe000e010

08003c24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c28:	2100      	movs	r1, #0
 8003c2a:	f06f 0004 	mvn.w	r0, #4
 8003c2e:	f7ff ffbf 	bl	8003bb0 <__NVIC_SetPriority>
#endif
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3e:	f3ef 8305 	mrs	r3, IPSR
 8003c42:	603b      	str	r3, [r7, #0]
  return(result);
 8003c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c4a:	f06f 0305 	mvn.w	r3, #5
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e00c      	b.n	8003c6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <osKernelInitialize+0x44>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <osKernelInitialize+0x44>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	e002      	b.n	8003c6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	2000018c 	.word	0x2000018c

08003c80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c86:	f3ef 8305 	mrs	r3, IPSR
 8003c8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c92:	f06f 0305 	mvn.w	r3, #5
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	e010      	b.n	8003cbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <osKernelStart+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d109      	bne.n	8003cb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ca2:	f7ff ffbf 	bl	8003c24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <osKernelStart+0x48>)
 8003ca8:	2202      	movs	r2, #2
 8003caa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003cac:	f001 fb9e 	bl	80053ec <vTaskStartScheduler>
      stat = osOK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	e002      	b.n	8003cbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000018c 	.word	0x2000018c

08003ccc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	; 0x38
 8003cd0:	af04      	add	r7, sp, #16
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cdc:	f3ef 8305 	mrs	r3, IPSR
 8003ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ce2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d17e      	bne.n	8003de6 <osThreadNew+0x11a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d07b      	beq.n	8003de6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003cf2:	2318      	movs	r3, #24
 8003cf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d045      	beq.n	8003d92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <osThreadNew+0x48>
        name = attr->name;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <osThreadNew+0x6e>
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b38      	cmp	r3, #56	; 0x38
 8003d2c:	d805      	bhi.n	8003d3a <osThreadNew+0x6e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <osThreadNew+0x72>
        return (NULL);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e054      	b.n	8003de8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <osThreadNew+0xa8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2ba7      	cmp	r3, #167	; 0xa7
 8003d5c:	d90a      	bls.n	8003d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <osThreadNew+0xa8>
        mem = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e010      	b.n	8003d96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10c      	bne.n	8003d96 <osThreadNew+0xca>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d108      	bne.n	8003d96 <osThreadNew+0xca>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <osThreadNew+0xca>
          mem = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e001      	b.n	8003d96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d110      	bne.n	8003dbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003da4:	9202      	str	r2, [sp, #8]
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f001 f92e 	bl	8005014 <xTaskCreateStatic>
 8003db8:	4603      	mov	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e013      	b.n	8003de6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d110      	bne.n	8003de6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f001 f979 	bl	80050ce <xTaskCreate>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <osThreadNew+0x11a>
            hTask = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003de6:	693b      	ldr	r3, [r7, #16]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	; 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df8:	f3ef 8305 	mrs	r3, IPSR
 8003dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <osDelay+0x1c>
    stat = osErrorISR;
 8003e04:	f06f 0305 	mvn.w	r3, #5
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e007      	b.n	8003e1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f001 fab4 	bl	8005384 <vTaskDelay>
    }
  }

  return (stat);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b088      	sub	sp, #32
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e32:	f3ef 8305 	mrs	r3, IPSR
 8003e36:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e38:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d174      	bne.n	8003f28 <osMutexNew+0x102>
    if (attr != NULL) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <osMutexNew+0x26>
      type = attr->attr_bits;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	e001      	b.n	8003e50 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <osMutexNew+0x3a>
      rmtx = 1U;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e001      	b.n	8003e64 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d15c      	bne.n	8003f28 <osMutexNew+0x102>
      mem = -1;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d006      	beq.n	8003e90 <osMutexNew+0x6a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b4f      	cmp	r3, #79	; 0x4f
 8003e88:	d902      	bls.n	8003e90 <osMutexNew+0x6a>
          mem = 1;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e00c      	b.n	8003eaa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <osMutexNew+0x84>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <osMutexNew+0x84>
            mem = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	e001      	b.n	8003eaa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d112      	bne.n	8003ed6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	2004      	movs	r0, #4
 8003ebe:	f000 fb18 	bl	80044f2 <xQueueCreateMutexStatic>
 8003ec2:	61f8      	str	r0, [r7, #28]
 8003ec4:	e016      	b.n	8003ef4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f000 fb10 	bl	80044f2 <xQueueCreateMutexStatic>
 8003ed2:	61f8      	str	r0, [r7, #28]
 8003ed4:	e00e      	b.n	8003ef4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ee2:	2004      	movs	r0, #4
 8003ee4:	f000 faed 	bl	80044c2 <xQueueCreateMutex>
 8003ee8:	61f8      	str	r0, [r7, #28]
 8003eea:	e003      	b.n	8003ef4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003eec:	2001      	movs	r0, #1
 8003eee:	f000 fae8 	bl	80044c2 <xQueueCreateMutex>
 8003ef2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <osMutexNew+0xee>
        if (attr != NULL) {
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <osMutexNew+0xe2>
          name = attr->name;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e001      	b.n	8003f0c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	69f8      	ldr	r0, [r7, #28]
 8003f10:	f001 f822 	bl	8004f58 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <osMutexNew+0x102>
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003f28:	69fb      	ldr	r3, [r7, #28]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f50:	f3ef 8305 	mrs	r3, IPSR
 8003f54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003f5c:	f06f 0305 	mvn.w	r3, #5
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	e02c      	b.n	8003fbe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003f6a:	f06f 0303 	mvn.w	r3, #3
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e025      	b.n	8003fbe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d011      	beq.n	8003f9c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f000 fb08 	bl	8004590 <xQueueTakeMutexRecursive>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d01b      	beq.n	8003fbe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003f8c:	f06f 0301 	mvn.w	r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e014      	b.n	8003fbe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003f94:	f06f 0302 	mvn.w	r3, #2
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e010      	b.n	8003fbe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	6938      	ldr	r0, [r7, #16]
 8003fa0:	f000 fda6 	bl	8004af0 <xQueueSemaphoreTake>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d009      	beq.n	8003fbe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003fb0:	f06f 0301 	mvn.w	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e002      	b.n	8003fbe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003fb8:	f06f 0302 	mvn.w	r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003fbe:	697b      	ldr	r3, [r7, #20]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe4:	f3ef 8305 	mrs	r3, IPSR
 8003fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003ff0:	f06f 0305 	mvn.w	r3, #5
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e01f      	b.n	8004038 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003ffe:	f06f 0303 	mvn.w	r3, #3
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e018      	b.n	8004038 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d009      	beq.n	8004020 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800400c:	6938      	ldr	r0, [r7, #16]
 800400e:	f000 fa8b 	bl	8004528 <xQueueGiveMutexRecursive>
 8004012:	4603      	mov	r3, r0
 8004014:	2b01      	cmp	r3, #1
 8004016:	d00f      	beq.n	8004038 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004018:	f06f 0302 	mvn.w	r3, #2
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e00b      	b.n	8004038 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004020:	2300      	movs	r3, #0
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	6938      	ldr	r0, [r7, #16]
 8004028:	f000 fae8 	bl	80045fc <xQueueGenericSend>
 800402c:	4603      	mov	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d002      	beq.n	8004038 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004032:	f06f 0302 	mvn.w	r3, #2
 8004036:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004038:	697b      	ldr	r3, [r7, #20]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <vApplicationGetIdleTaskMemory+0x2c>)
 8004054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4a06      	ldr	r2, [pc, #24]	; (8004074 <vApplicationGetIdleTaskMemory+0x30>)
 800405a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000190 	.word	0x20000190
 8004074:	20000238 	.word	0x20000238

08004078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <vApplicationGetTimerTaskMemory+0x30>)
 800408e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004096:	601a      	str	r2, [r3, #0]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20000438 	.word	0x20000438
 80040a8:	200004e0 	.word	0x200004e0

080040ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f103 0208 	add.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f103 0208 	add.w	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f103 0208 	add.w	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d103      	bne.n	800416e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e00c      	b.n	8004188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3308      	adds	r3, #8
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e002      	b.n	800417c <vListInsert+0x2e>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d2f6      	bcs.n	8004176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6892      	ldr	r2, [r2, #8]
 80041d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6852      	ldr	r2, [r2, #4]
 80041e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d103      	bne.n	80041f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800423e:	f002 fb99 	bl	8006974 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	3b01      	subs	r3, #1
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	22ff      	movs	r2, #255	; 0xff
 800428a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d114      	bne.n	80042be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01a      	beq.n	80042d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3310      	adds	r3, #16
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 fb3d 	bl	8005920 <xTaskRemoveFromEventList>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <xQueueGenericReset+0xcc>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	e009      	b.n	80042d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3310      	adds	r3, #16
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fef2 	bl	80040ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3324      	adds	r3, #36	; 0x24
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff feed 	bl	80040ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042d2:	f002 fb7f 	bl	80069d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08e      	sub	sp, #56	; 0x38
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <xQueueGenericCreateStatic+0x52>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <xQueueGenericCreateStatic+0x56>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <xQueueGenericCreateStatic+0x58>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	623b      	str	r3, [r7, #32]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <xQueueGenericCreateStatic+0x7e>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueGenericCreateStatic+0x82>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericCreateStatic+0x84>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61fb      	str	r3, [r7, #28]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004382:	2350      	movs	r3, #80	; 0x50
 8004384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b50      	cmp	r3, #80	; 0x50
 800438a:	d00a      	beq.n	80043a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61bb      	str	r3, [r7, #24]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f83f 	bl	8004448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3730      	adds	r7, #48	; 0x30
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	613b      	str	r3, [r7, #16]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3350      	adds	r3, #80	; 0x50
 800440c:	4618      	mov	r0, r3
 800440e:	f002 fbd3 	bl	8006bb8 <pvPortMalloc>
 8004412:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3350      	adds	r3, #80	; 0x50
 8004422:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442c:	79fa      	ldrb	r2, [r7, #7]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	68b9      	ldr	r1, [r7, #8]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 f805 	bl	8004448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800443e:	69bb      	ldr	r3, [r7, #24]
	}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e002      	b.n	800446a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004476:	2101      	movs	r1, #1
 8004478:	69b8      	ldr	r0, [r7, #24]
 800447a:	f7ff fecb 	bl	8004214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044ae:	2300      	movs	r3, #0
 80044b0:	2200      	movs	r2, #0
 80044b2:	2100      	movs	r1, #0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8a1 	bl	80045fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044cc:	2301      	movs	r3, #1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	461a      	mov	r2, r3
 80044d8:	6939      	ldr	r1, [r7, #16]
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	f7ff ff7a 	bl	80043d4 <xQueueGenericCreate>
 80044e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ffd3 	bl	800448e <prvInitialiseMutex>

		return xNewQueue;
 80044e8:	68fb      	ldr	r3, [r7, #12]
	}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b088      	sub	sp, #32
 80044f6:	af02      	add	r7, sp, #8
 80044f8:	4603      	mov	r3, r0
 80044fa:	6039      	str	r1, [r7, #0]
 80044fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044fe:	2301      	movs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2200      	movs	r2, #0
 800450e:	6939      	ldr	r1, [r7, #16]
 8004510:	6978      	ldr	r0, [r7, #20]
 8004512:	f7ff fee7 	bl	80042e4 <xQueueGenericCreateStatic>
 8004516:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7ff ffb8 	bl	800448e <prvInitialiseMutex>

		return xNewQueue;
 800451e:	68fb      	ldr	r3, [r7, #12]
	}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	60fb      	str	r3, [r7, #12]
}
 800454c:	bf00      	nop
 800454e:	e7fe      	b.n	800454e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	689c      	ldr	r4, [r3, #8]
 8004554:	f001 fba6 	bl	8005ca4 <xTaskGetCurrentTaskHandle>
 8004558:	4603      	mov	r3, r0
 800455a:	429c      	cmp	r4, r3
 800455c:	d111      	bne.n	8004582 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	1e5a      	subs	r2, r3, #1
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d105      	bne.n	800457c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004570:	2300      	movs	r3, #0
 8004572:	2200      	movs	r2, #0
 8004574:	2100      	movs	r1, #0
 8004576:	6938      	ldr	r0, [r7, #16]
 8004578:	f000 f840 	bl	80045fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800457c:	2301      	movs	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e001      	b.n	8004586 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004586:	697b      	ldr	r3, [r7, #20]
	}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd90      	pop	{r4, r7, pc}

08004590 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	689c      	ldr	r4, [r3, #8]
 80045be:	f001 fb71 	bl	8005ca4 <xTaskGetCurrentTaskHandle>
 80045c2:	4603      	mov	r3, r0
 80045c4:	429c      	cmp	r4, r3
 80045c6:	d107      	bne.n	80045d8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80045d2:	2301      	movs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e00c      	b.n	80045f2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	6938      	ldr	r0, [r7, #16]
 80045dc:	f000 fa88 	bl	8004af0 <xQueueSemaphoreTake>
 80045e0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80045f2:	697b      	ldr	r3, [r7, #20]
	}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd90      	pop	{r4, r7, pc}

080045fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08e      	sub	sp, #56	; 0x38
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800460a:	2300      	movs	r3, #0
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <xQueueGenericSend+0x32>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d103      	bne.n	800463c <xQueueGenericSend+0x40>
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <xQueueGenericSend+0x44>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <xQueueGenericSend+0x46>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10a      	bne.n	800465c <xQueueGenericSend+0x60>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d103      	bne.n	800466a <xQueueGenericSend+0x6e>
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <xQueueGenericSend+0x72>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <xQueueGenericSend+0x74>
 800466e:	2300      	movs	r3, #0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xQueueGenericSend+0x8e>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800468a:	f001 fb1b 	bl	8005cc4 <xTaskGetSchedulerState>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <xQueueGenericSend+0x9e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <xQueueGenericSend+0xa2>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <xQueueGenericSend+0xa4>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <xQueueGenericSend+0xbe>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	61fb      	str	r3, [r7, #28]
}
 80046b6:	bf00      	nop
 80046b8:	e7fe      	b.n	80046b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ba:	f002 f95b 	bl	8006974 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <xQueueGenericSend+0xd4>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d129      	bne.n	8004724 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d6:	f000 fb2f 	bl	8004d38 <prvCopyDataToQueue>
 80046da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	3324      	adds	r3, #36	; 0x24
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 f919 	bl	8005920 <xTaskRemoveFromEventList>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046f4:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <xQueueGenericSend+0x1f8>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	e00a      	b.n	800471c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <xQueueGenericSend+0x1f8>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800471c:	f002 f95a 	bl	80069d4 <vPortExitCritical>
				return pdPASS;
 8004720:	2301      	movs	r3, #1
 8004722:	e063      	b.n	80047ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800472a:	f002 f953 	bl	80069d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800472e:	2300      	movs	r3, #0
 8004730:	e05c      	b.n	80047ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4618      	mov	r0, r3
 800473e:	f001 f953 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004742:	2301      	movs	r3, #1
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004746:	f002 f945 	bl	80069d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800474a:	f000 febf 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474e:	f002 f911 	bl	8006974 <vPortEnterCritical>
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004758:	b25b      	sxtb	r3, r3
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d103      	bne.n	8004768 <xQueueGenericSend+0x16c>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d103      	bne.n	800477e <xQueueGenericSend+0x182>
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477e:	f002 f929 	bl	80069d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004782:	1d3a      	adds	r2, r7, #4
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4611      	mov	r1, r2
 800478a:	4618      	mov	r0, r3
 800478c:	f001 f942 	bl	8005a14 <xTaskCheckForTimeOut>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d124      	bne.n	80047e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004798:	f000 fbc6 	bl	8004f28 <prvIsQueueFull>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d018      	beq.n	80047d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	3310      	adds	r3, #16
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f868 	bl	8005880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b2:	f000 fb51 	bl	8004e58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047b6:	f000 fe97 	bl	80054e8 <xTaskResumeAll>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f af7c 	bne.w	80046ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <xQueueGenericSend+0x1f8>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	e772      	b.n	80046ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047d6:	f000 fb3f 	bl	8004e58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047da:	f000 fe85 	bl	80054e8 <xTaskResumeAll>
 80047de:	e76c      	b.n	80046ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e2:	f000 fb39 	bl	8004e58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e6:	f000 fe7f 	bl	80054e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3738      	adds	r7, #56	; 0x38
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b090      	sub	sp, #64	; 0x40
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <xQueueGenericSendFromISR+0x3c>
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <xQueueGenericSendFromISR+0x40>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <xQueueGenericSendFromISR+0x42>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d103      	bne.n	8004862 <xQueueGenericSendFromISR+0x6a>
 800485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <xQueueGenericSendFromISR+0x6e>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <xQueueGenericSendFromISR+0x70>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	623b      	str	r3, [r7, #32]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004882:	f002 f959 	bl	8006b38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004886:	f3ef 8211 	mrs	r2, BASEPRI
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	61fa      	str	r2, [r7, #28]
 800489c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800489e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <xQueueGenericSendFromISR+0xbc>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d12f      	bne.n	8004914 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048ca:	f000 fa35 	bl	8004d38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d112      	bne.n	80048fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d016      	beq.n	800490e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	3324      	adds	r3, #36	; 0x24
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 f81b 	bl	8005920 <xTaskRemoveFromEventList>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	e007      	b.n	800490e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004902:	3301      	adds	r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	b25a      	sxtb	r2, r3
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800490e:	2301      	movs	r3, #1
 8004910:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004912:	e001      	b.n	8004918 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004914:	2300      	movs	r3, #0
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004922:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004926:	4618      	mov	r0, r3
 8004928:	3740      	adds	r7, #64	; 0x40
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <xQueueReceive+0x30>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	623b      	str	r3, [r7, #32]
}
 800495c:	bf00      	nop
 800495e:	e7fe      	b.n	800495e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <xQueueReceive+0x3e>
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <xQueueReceive+0x42>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <xQueueReceive+0x44>
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xQueueReceive+0x5e>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	61fb      	str	r3, [r7, #28]
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800498e:	f001 f999 	bl	8005cc4 <xTaskGetSchedulerState>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <xQueueReceive+0x6e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <xQueueReceive+0x72>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <xQueueReceive+0x74>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xQueueReceive+0x8e>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61bb      	str	r3, [r7, #24]
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049be:	f001 ffd9 	bl	8006974 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01f      	beq.n	8004a0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d2:	f000 fa1b 	bl	8004e0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1e5a      	subs	r2, r3, #1
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00f      	beq.n	8004a06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	3310      	adds	r3, #16
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ff98 	bl	8005920 <xTaskRemoveFromEventList>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <xQueueReceive+0x1bc>)
 80049f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a06:	f001 ffe5 	bl	80069d4 <vPortExitCritical>
				return pdPASS;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e069      	b.n	8004ae2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a14:	f001 ffde 	bl	80069d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e062      	b.n	8004ae2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a22:	f107 0310 	add.w	r3, r7, #16
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 ffde 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a30:	f001 ffd0 	bl	80069d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a34:	f000 fd4a 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a38:	f001 ff9c 	bl	8006974 <vPortEnterCritical>
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a42:	b25b      	sxtb	r3, r3
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d103      	bne.n	8004a52 <xQueueReceive+0x122>
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a58:	b25b      	sxtb	r3, r3
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5e:	d103      	bne.n	8004a68 <xQueueReceive+0x138>
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	f001 ffb4 	bl	80069d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a6c:	1d3a      	adds	r2, r7, #4
 8004a6e:	f107 0310 	add.w	r3, r7, #16
 8004a72:	4611      	mov	r1, r2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 ffcd 	bl	8005a14 <xTaskCheckForTimeOut>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d123      	bne.n	8004ac8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a82:	f000 fa3b 	bl	8004efc <prvIsQueueEmpty>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d017      	beq.n	8004abc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	3324      	adds	r3, #36	; 0x24
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fef3 	bl	8005880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9c:	f000 f9dc 	bl	8004e58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004aa0:	f000 fd22 	bl	80054e8 <xTaskResumeAll>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d189      	bne.n	80049be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <xQueueReceive+0x1bc>)
 8004aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	e780      	b.n	80049be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abe:	f000 f9cb 	bl	8004e58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ac2:	f000 fd11 	bl	80054e8 <xTaskResumeAll>
 8004ac6:	e77a      	b.n	80049be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aca:	f000 f9c5 	bl	8004e58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ace:	f000 fd0b 	bl	80054e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad4:	f000 fa12 	bl	8004efc <prvIsQueueEmpty>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f43f af6f 	beq.w	80049be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3730      	adds	r7, #48	; 0x30
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08e      	sub	sp, #56	; 0x38
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	623b      	str	r3, [r7, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	61fb      	str	r3, [r7, #28]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b40:	f001 f8c0 	bl	8005cc4 <xTaskGetSchedulerState>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <xQueueSemaphoreTake+0x60>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <xQueueSemaphoreTake+0x64>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <xQueueSemaphoreTake+0x66>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	61bb      	str	r3, [r7, #24]
}
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b70:	f001 ff00 	bl	8006974 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d024      	beq.n	8004bca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	1e5a      	subs	r2, r3, #1
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b90:	f001 fa0e 	bl	8005fb0 <pvTaskIncrementMutexHeldCount>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00f      	beq.n	8004bc2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	3310      	adds	r3, #16
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 feba 	bl	8005920 <xTaskRemoveFromEventList>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bb2:	4b54      	ldr	r3, [pc, #336]	; (8004d04 <xQueueSemaphoreTake+0x214>)
 8004bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bc2:	f001 ff07 	bl	80069d4 <vPortExitCritical>
				return pdPASS;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e097      	b.n	8004cfa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d111      	bne.n	8004bf4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	617b      	str	r3, [r7, #20]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bec:	f001 fef2 	bl	80069d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e082      	b.n	8004cfa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fef2 	bl	80059e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c08:	f001 fee4 	bl	80069d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c0c:	f000 fc5e 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c10:	f001 feb0 	bl	8006974 <vPortEnterCritical>
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d103      	bne.n	8004c2a <xQueueSemaphoreTake+0x13a>
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c30:	b25b      	sxtb	r3, r3
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d103      	bne.n	8004c40 <xQueueSemaphoreTake+0x150>
 8004c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c40:	f001 fec8 	bl	80069d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c44:	463a      	mov	r2, r7
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fee1 	bl	8005a14 <xTaskCheckForTimeOut>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d132      	bne.n	8004cbe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c5a:	f000 f94f 	bl	8004efc <prvIsQueueEmpty>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d026      	beq.n	8004cb2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004c6c:	f001 fe82 	bl	8006974 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f843 	bl	8005d00 <xTaskPriorityInherit>
 8004c7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c7c:	f001 feaa 	bl	80069d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	3324      	adds	r3, #36	; 0x24
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fdf9 	bl	8005880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c90:	f000 f8e2 	bl	8004e58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c94:	f000 fc28 	bl	80054e8 <xTaskResumeAll>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f47f af68 	bne.w	8004b70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <xQueueSemaphoreTake+0x214>)
 8004ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	e75e      	b.n	8004b70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cb4:	f000 f8d0 	bl	8004e58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cb8:	f000 fc16 	bl	80054e8 <xTaskResumeAll>
 8004cbc:	e758      	b.n	8004b70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cc0:	f000 f8ca 	bl	8004e58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cc4:	f000 fc10 	bl	80054e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cca:	f000 f917 	bl	8004efc <prvIsQueueEmpty>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f43f af4d 	beq.w	8004b70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004cdc:	f001 fe4a 	bl	8006974 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ce2:	f000 f811 	bl	8004d08 <prvGetDisinheritPriorityAfterTimeout>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f8dc 	bl	8005eac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cf4:	f001 fe6e 	bl	80069d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3738      	adds	r7, #56	; 0x38
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e001      	b.n	8004d2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d14d      	bne.n	8004dfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 f834 	bl	8005dd0 <xTaskPriorityDisinherit>
 8004d68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	e043      	b.n	8004dfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d119      	bne.n	8004dac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6858      	ldr	r0, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	461a      	mov	r2, r3
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	f002 f986 	bl	8007094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d32b      	bcc.n	8004dfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	e026      	b.n	8004dfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68d8      	ldr	r0, [r3, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	461a      	mov	r2, r3
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	f002 f96c 	bl	8007094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	425b      	negs	r3, r3
 8004dc6:	441a      	add	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d207      	bcs.n	8004de8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	425b      	negs	r3, r3
 8004de2:	441a      	add	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d105      	bne.n	8004dfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e02:	697b      	ldr	r3, [r7, #20]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	441a      	add	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d303      	bcc.n	8004e40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68d9      	ldr	r1, [r3, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6838      	ldr	r0, [r7, #0]
 8004e4c:	f002 f922 	bl	8007094 <memcpy>
	}
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e60:	f001 fd88 	bl	8006974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e6c:	e011      	b.n	8004e92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3324      	adds	r3, #36	; 0x24
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fd50 	bl	8005920 <xTaskRemoveFromEventList>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e86:	f000 fe27 	bl	8005ad8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dce9      	bgt.n	8004e6e <prvUnlockQueue+0x16>
 8004e9a:	e000      	b.n	8004e9e <prvUnlockQueue+0x46>
					break;
 8004e9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	22ff      	movs	r2, #255	; 0xff
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ea6:	f001 fd95 	bl	80069d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004eaa:	f001 fd63 	bl	8006974 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb6:	e011      	b.n	8004edc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fd2b 	bl	8005920 <xTaskRemoveFromEventList>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ed0:	f000 fe02 	bl	8005ad8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	dce9      	bgt.n	8004eb8 <prvUnlockQueue+0x60>
 8004ee4:	e000      	b.n	8004ee8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ee6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	22ff      	movs	r2, #255	; 0xff
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ef0:	f001 fd70 	bl	80069d4 <vPortExitCritical>
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f04:	f001 fd36 	bl	8006974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f10:	2301      	movs	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e001      	b.n	8004f1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f1a:	f001 fd5b 	bl	80069d4 <vPortExitCritical>

	return xReturn;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f30:	f001 fd20 	bl	8006974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d102      	bne.n	8004f46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e001      	b.n	8004f4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f4a:	f001 fd43 	bl	80069d4 <vPortExitCritical>

	return xReturn;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	e014      	b.n	8004f92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f68:	4a0f      	ldr	r2, [pc, #60]	; (8004fa8 <vQueueAddToRegistry+0x50>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f74:	490c      	ldr	r1, [pc, #48]	; (8004fa8 <vQueueAddToRegistry+0x50>)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <vQueueAddToRegistry+0x50>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	4413      	add	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f8a:	e006      	b.n	8004f9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2b07      	cmp	r3, #7
 8004f96:	d9e7      	bls.n	8004f68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	200008e0 	.word	0x200008e0

08004fac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fbc:	f001 fcda 	bl	8006974 <vPortEnterCritical>
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fc6:	b25b      	sxtb	r3, r3
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d103      	bne.n	8004fd6 <vQueueWaitForMessageRestricted+0x2a>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d103      	bne.n	8004fec <vQueueWaitForMessageRestricted+0x40>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fec:	f001 fcf2 	bl	80069d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d106      	bne.n	8005006 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3324      	adds	r3, #36	; 0x24
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fc61 	bl	80058c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff ff26 	bl	8004e58 <prvUnlockQueue>
	}
 800500c:	bf00      	nop
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08e      	sub	sp, #56	; 0x38
 8005018:	af04      	add	r7, sp, #16
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	623b      	str	r3, [r7, #32]
}
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <xTaskCreateStatic+0x46>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	61fb      	str	r3, [r7, #28]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505a:	23a8      	movs	r3, #168	; 0xa8
 800505c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2ba8      	cmp	r3, #168	; 0xa8
 8005062:	d00a      	beq.n	800507a <xTaskCreateStatic+0x66>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61bb      	str	r3, [r7, #24]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800507a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01e      	beq.n	80050c0 <xTaskCreateStatic+0xac>
 8005082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005090:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	2202      	movs	r2, #2
 8005096:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800509a:	2300      	movs	r3, #0
 800509c:	9303      	str	r3, [sp, #12]
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	9302      	str	r3, [sp, #8]
 80050a2:	f107 0314 	add.w	r3, r7, #20
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f850 	bl	8005158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ba:	f000 f8f3 	bl	80052a4 <prvAddNewTaskToReadyList>
 80050be:	e001      	b.n	80050c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050c4:	697b      	ldr	r3, [r7, #20]
	}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3728      	adds	r7, #40	; 0x28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b08c      	sub	sp, #48	; 0x30
 80050d2:	af04      	add	r7, sp, #16
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fd68 	bl	8006bb8 <pvPortMalloc>
 80050e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050f0:	20a8      	movs	r0, #168	; 0xa8
 80050f2:	f001 fd61 	bl	8006bb8 <pvPortMalloc>
 80050f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
 8005104:	e005      	b.n	8005112 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005106:	6978      	ldr	r0, [r7, #20]
 8005108:	f001 fe22 	bl	8006d50 <vPortFree>
 800510c:	e001      	b.n	8005112 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d017      	beq.n	8005148 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	2300      	movs	r3, #0
 8005124:	9303      	str	r3, [sp, #12]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f80e 	bl	8005158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800513c:	69f8      	ldr	r0, [r7, #28]
 800513e:	f000 f8b1 	bl	80052a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005142:	2301      	movs	r3, #1
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e002      	b.n	800514e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005148:	f04f 33ff 	mov.w	r3, #4294967295
 800514c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800514e:	69bb      	ldr	r3, [r7, #24]
	}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	21a5      	movs	r1, #165	; 0xa5
 8005172:	f001 ff0b 	bl	8006f8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005180:	3b01      	subs	r3, #1
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	617b      	str	r3, [r7, #20]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01f      	beq.n	80051f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e012      	b.n	80051e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	7819      	ldrb	r1, [r3, #0]
 80051c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	3334      	adds	r3, #52	; 0x34
 80051cc:	460a      	mov	r2, r1
 80051ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	3301      	adds	r3, #1
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	2b0f      	cmp	r3, #15
 80051e6:	d9e9      	bls.n	80051bc <prvInitialiseNewTask+0x64>
 80051e8:	e000      	b.n	80051ec <prvInitialiseNewTask+0x94>
			{
				break;
 80051ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f4:	e003      	b.n	80051fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	2b37      	cmp	r3, #55	; 0x37
 8005202:	d901      	bls.n	8005208 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005204:	2337      	movs	r3, #55	; 0x37
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005212:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	2200      	movs	r2, #0
 8005218:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe ff64 	bl	80040ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	3318      	adds	r3, #24
 8005228:	4618      	mov	r0, r3
 800522a:	f7fe ff5f 	bl	80040ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005232:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005242:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	2200      	movs	r2, #0
 8005250:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	3354      	adds	r3, #84	; 0x54
 8005258:	224c      	movs	r2, #76	; 0x4c
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f001 fe95 	bl	8006f8c <memset>
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	4a0c      	ldr	r2, [pc, #48]	; (8005298 <prvInitialiseNewTask+0x140>)
 8005266:	659a      	str	r2, [r3, #88]	; 0x58
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	4a0c      	ldr	r2, [pc, #48]	; (800529c <prvInitialiseNewTask+0x144>)
 800526c:	65da      	str	r2, [r3, #92]	; 0x5c
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <prvInitialiseNewTask+0x148>)
 8005272:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	69b8      	ldr	r0, [r7, #24]
 800527a:	f001 fa4f 	bl	800671c <pxPortInitialiseStack>
 800527e:	4602      	mov	r2, r0
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20004b74 	.word	0x20004b74
 800529c:	20004bdc 	.word	0x20004bdc
 80052a0:	20004c44 	.word	0x20004c44

080052a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052ac:	f001 fb62 	bl	8006974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <prvAddNewTaskToReadyList+0xc4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <prvAddNewTaskToReadyList+0xc4>)
 80052b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ba:	4b2c      	ldr	r3, [pc, #176]	; (800536c <prvAddNewTaskToReadyList+0xc8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052c2:	4a2a      	ldr	r2, [pc, #168]	; (800536c <prvAddNewTaskToReadyList+0xc8>)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <prvAddNewTaskToReadyList+0xc4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d110      	bne.n	80052f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052d0:	f000 fc26 	bl	8005b20 <prvInitialiseTaskLists>
 80052d4:	e00d      	b.n	80052f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052d6:	4b26      	ldr	r3, [pc, #152]	; (8005370 <prvAddNewTaskToReadyList+0xcc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052de:	4b23      	ldr	r3, [pc, #140]	; (800536c <prvAddNewTaskToReadyList+0xc8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d802      	bhi.n	80052f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <prvAddNewTaskToReadyList+0xc8>)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052f2:	4b20      	ldr	r3, [pc, #128]	; (8005374 <prvAddNewTaskToReadyList+0xd0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <prvAddNewTaskToReadyList+0xd0>)
 80052fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <prvAddNewTaskToReadyList+0xd0>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <prvAddNewTaskToReadyList+0xd4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d903      	bls.n	8005318 <prvAddNewTaskToReadyList+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a18      	ldr	r2, [pc, #96]	; (8005378 <prvAddNewTaskToReadyList+0xd4>)
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4a15      	ldr	r2, [pc, #84]	; (800537c <prvAddNewTaskToReadyList+0xd8>)
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fe fee9 	bl	8004106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005334:	f001 fb4e 	bl	80069d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005338:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <prvAddNewTaskToReadyList+0xcc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <prvAddNewTaskToReadyList+0xc8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	429a      	cmp	r2, r3
 800534c:	d207      	bcs.n	800535e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <prvAddNewTaskToReadyList+0xdc>)
 8005350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000df4 	.word	0x20000df4
 800536c:	20000920 	.word	0x20000920
 8005370:	20000e00 	.word	0x20000e00
 8005374:	20000e10 	.word	0x20000e10
 8005378:	20000dfc 	.word	0x20000dfc
 800537c:	20000924 	.word	0x20000924
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d017      	beq.n	80053c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005396:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <vTaskDelay+0x60>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <vTaskDelay+0x30>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60bb      	str	r3, [r7, #8]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053b4:	f000 f88a 	bl	80054cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053b8:	2100      	movs	r1, #0
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fe0c 	bl	8005fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053c0:	f000 f892 	bl	80054e8 <xTaskResumeAll>
 80053c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d107      	bne.n	80053dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <vTaskDelay+0x64>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000e1c 	.word	0x20000e1c
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053fa:	463a      	mov	r2, r7
 80053fc:	1d39      	adds	r1, r7, #4
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe fe1e 	bl	8004044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	9202      	str	r2, [sp, #8]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	2300      	movs	r3, #0
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	460a      	mov	r2, r1
 800541a:	4924      	ldr	r1, [pc, #144]	; (80054ac <vTaskStartScheduler+0xc0>)
 800541c:	4824      	ldr	r0, [pc, #144]	; (80054b0 <vTaskStartScheduler+0xc4>)
 800541e:	f7ff fdf9 	bl	8005014 <xTaskCreateStatic>
 8005422:	4603      	mov	r3, r0
 8005424:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <vTaskStartScheduler+0xc8>)
 8005426:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <vTaskStartScheduler+0xc8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
 8005434:	e001      	b.n	800543a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d102      	bne.n	8005446 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005440:	f000 fe1e 	bl	8006080 <xTimerCreateTimerTask>
 8005444:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d11b      	bne.n	8005484 <vTaskStartScheduler+0x98>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	613b      	str	r3, [r7, #16]
}
 800545e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005460:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <vTaskStartScheduler+0xcc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3354      	adds	r3, #84	; 0x54
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <vTaskStartScheduler+0xd0>)
 8005468:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <vTaskStartScheduler+0xd4>)
 800546c:	f04f 32ff 	mov.w	r2, #4294967295
 8005470:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <vTaskStartScheduler+0xd8>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <vTaskStartScheduler+0xdc>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800547e:	f001 f9d7 	bl	8006830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005482:	e00e      	b.n	80054a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d10a      	bne.n	80054a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60fb      	str	r3, [r7, #12]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <vTaskStartScheduler+0xb4>
}
 80054a2:	bf00      	nop
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	08007198 	.word	0x08007198
 80054b0:	08005af1 	.word	0x08005af1
 80054b4:	20000e18 	.word	0x20000e18
 80054b8:	20000920 	.word	0x20000920
 80054bc:	2000005c 	.word	0x2000005c
 80054c0:	20000e14 	.word	0x20000e14
 80054c4:	20000e00 	.word	0x20000e00
 80054c8:	20000df8 	.word	0x20000df8

080054cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <vTaskSuspendAll+0x18>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <vTaskSuspendAll+0x18>)
 80054d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000e1c 	.word	0x20000e1c

080054e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054f6:	4b42      	ldr	r3, [pc, #264]	; (8005600 <xTaskResumeAll+0x118>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <xTaskResumeAll+0x2c>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	603b      	str	r3, [r7, #0]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005514:	f001 fa2e 	bl	8006974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005518:	4b39      	ldr	r3, [pc, #228]	; (8005600 <xTaskResumeAll+0x118>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	4a38      	ldr	r2, [pc, #224]	; (8005600 <xTaskResumeAll+0x118>)
 8005520:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005522:	4b37      	ldr	r3, [pc, #220]	; (8005600 <xTaskResumeAll+0x118>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d162      	bne.n	80055f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800552a:	4b36      	ldr	r3, [pc, #216]	; (8005604 <xTaskResumeAll+0x11c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d05e      	beq.n	80055f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005532:	e02f      	b.n	8005594 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005534:	4b34      	ldr	r3, [pc, #208]	; (8005608 <xTaskResumeAll+0x120>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3318      	adds	r3, #24
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe fe3d 	bl	80041c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3304      	adds	r3, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe fe38 	bl	80041c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <xTaskResumeAll+0x124>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d903      	bls.n	8005564 <xTaskResumeAll+0x7c>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	4a2a      	ldr	r2, [pc, #168]	; (800560c <xTaskResumeAll+0x124>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <xTaskResumeAll+0x128>)
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7fe fdc3 	bl	8004106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4b23      	ldr	r3, [pc, #140]	; (8005614 <xTaskResumeAll+0x12c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	429a      	cmp	r2, r3
 800558c:	d302      	bcc.n	8005594 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800558e:	4b22      	ldr	r3, [pc, #136]	; (8005618 <xTaskResumeAll+0x130>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005594:	4b1c      	ldr	r3, [pc, #112]	; (8005608 <xTaskResumeAll+0x120>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1cb      	bne.n	8005534 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055a2:	f000 fb5f 	bl	8005c64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <xTaskResumeAll+0x134>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055b2:	f000 f847 	bl	8005644 <xTaskIncrementTick>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055bc:	4b16      	ldr	r3, [pc, #88]	; (8005618 <xTaskResumeAll+0x130>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f1      	bne.n	80055b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <xTaskResumeAll+0x134>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055d4:	4b10      	ldr	r3, [pc, #64]	; (8005618 <xTaskResumeAll+0x130>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055dc:	2301      	movs	r3, #1
 80055de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <xTaskResumeAll+0x138>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055f0:	f001 f9f0 	bl	80069d4 <vPortExitCritical>

	return xAlreadyYielded;
 80055f4:	68bb      	ldr	r3, [r7, #8]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000e1c 	.word	0x20000e1c
 8005604:	20000df4 	.word	0x20000df4
 8005608:	20000db4 	.word	0x20000db4
 800560c:	20000dfc 	.word	0x20000dfc
 8005610:	20000924 	.word	0x20000924
 8005614:	20000920 	.word	0x20000920
 8005618:	20000e08 	.word	0x20000e08
 800561c:	20000e04 	.word	0x20000e04
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <xTaskGetTickCount+0x1c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005630:	687b      	ldr	r3, [r7, #4]
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000df8 	.word	0x20000df8

08005644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564e:	4b4f      	ldr	r3, [pc, #316]	; (800578c <xTaskIncrementTick+0x148>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f040 808f 	bne.w	8005776 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005658:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <xTaskIncrementTick+0x14c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3301      	adds	r3, #1
 800565e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005660:	4a4b      	ldr	r2, [pc, #300]	; (8005790 <xTaskIncrementTick+0x14c>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d120      	bne.n	80056ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800566c:	4b49      	ldr	r3, [pc, #292]	; (8005794 <xTaskIncrementTick+0x150>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <xTaskIncrementTick+0x48>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	603b      	str	r3, [r7, #0]
}
 8005688:	bf00      	nop
 800568a:	e7fe      	b.n	800568a <xTaskIncrementTick+0x46>
 800568c:	4b41      	ldr	r3, [pc, #260]	; (8005794 <xTaskIncrementTick+0x150>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b41      	ldr	r3, [pc, #260]	; (8005798 <xTaskIncrementTick+0x154>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <xTaskIncrementTick+0x150>)
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <xTaskIncrementTick+0x154>)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	4b3e      	ldr	r3, [pc, #248]	; (800579c <xTaskIncrementTick+0x158>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	4a3d      	ldr	r2, [pc, #244]	; (800579c <xTaskIncrementTick+0x158>)
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	f000 fadb 	bl	8005c64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056ae:	4b3c      	ldr	r3, [pc, #240]	; (80057a0 <xTaskIncrementTick+0x15c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d349      	bcc.n	800574c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b8:	4b36      	ldr	r3, [pc, #216]	; (8005794 <xTaskIncrementTick+0x150>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c2:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <xTaskIncrementTick+0x15c>)
 80056c4:	f04f 32ff 	mov.w	r2, #4294967295
 80056c8:	601a      	str	r2, [r3, #0]
					break;
 80056ca:	e03f      	b.n	800574c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056cc:	4b31      	ldr	r3, [pc, #196]	; (8005794 <xTaskIncrementTick+0x150>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d203      	bcs.n	80056ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056e4:	4a2e      	ldr	r2, [pc, #184]	; (80057a0 <xTaskIncrementTick+0x15c>)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056ea:	e02f      	b.n	800574c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fd65 	bl	80041c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3318      	adds	r3, #24
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fd5c 	bl	80041c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <xTaskIncrementTick+0x160>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <xTaskIncrementTick+0xd8>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a22      	ldr	r2, [pc, #136]	; (80057a4 <xTaskIncrementTick+0x160>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <xTaskIncrementTick+0x164>)
 800572a:	441a      	add	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe fce7 	bl	8004106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <xTaskIncrementTick+0x168>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	429a      	cmp	r2, r3
 8005744:	d3b8      	bcc.n	80056b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005746:	2301      	movs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800574a:	e7b5      	b.n	80056b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <xTaskIncrementTick+0x168>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005752:	4915      	ldr	r1, [pc, #84]	; (80057a8 <xTaskIncrementTick+0x164>)
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d901      	bls.n	8005768 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <xTaskIncrementTick+0x16c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005770:	2301      	movs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e004      	b.n	8005780 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005776:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <xTaskIncrementTick+0x170>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <xTaskIncrementTick+0x170>)
 800577e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005780:	697b      	ldr	r3, [r7, #20]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000e1c 	.word	0x20000e1c
 8005790:	20000df8 	.word	0x20000df8
 8005794:	20000dac 	.word	0x20000dac
 8005798:	20000db0 	.word	0x20000db0
 800579c:	20000e0c 	.word	0x20000e0c
 80057a0:	20000e14 	.word	0x20000e14
 80057a4:	20000dfc 	.word	0x20000dfc
 80057a8:	20000924 	.word	0x20000924
 80057ac:	20000920 	.word	0x20000920
 80057b0:	20000e08 	.word	0x20000e08
 80057b4:	20000e04 	.word	0x20000e04

080057b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057be:	4b2a      	ldr	r3, [pc, #168]	; (8005868 <vTaskSwitchContext+0xb0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <vTaskSwitchContext+0xb4>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057cc:	e046      	b.n	800585c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <vTaskSwitchContext+0xb4>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b26      	ldr	r3, [pc, #152]	; (8005870 <vTaskSwitchContext+0xb8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e010      	b.n	80057fe <vTaskSwitchContext+0x46>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	607b      	str	r3, [r7, #4]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <vTaskSwitchContext+0x3e>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	491d      	ldr	r1, [pc, #116]	; (8005874 <vTaskSwitchContext+0xbc>)
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0e4      	beq.n	80057dc <vTaskSwitchContext+0x24>
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a15      	ldr	r2, [pc, #84]	; (8005874 <vTaskSwitchContext+0xbc>)
 800581e:	4413      	add	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	3308      	adds	r3, #8
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <vTaskSwitchContext+0x8a>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a0b      	ldr	r2, [pc, #44]	; (8005878 <vTaskSwitchContext+0xc0>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4a08      	ldr	r2, [pc, #32]	; (8005870 <vTaskSwitchContext+0xb8>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <vTaskSwitchContext+0xc0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3354      	adds	r3, #84	; 0x54
 8005858:	4a08      	ldr	r2, [pc, #32]	; (800587c <vTaskSwitchContext+0xc4>)
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	20000e1c 	.word	0x20000e1c
 800586c:	20000e08 	.word	0x20000e08
 8005870:	20000dfc 	.word	0x20000dfc
 8005874:	20000924 	.word	0x20000924
 8005878:	20000920 	.word	0x20000920
 800587c:	2000005c 	.word	0x2000005c

08005880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <vTaskPlaceOnEventList+0x44>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3318      	adds	r3, #24
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fe fc4d 	bl	800414e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058b4:	2101      	movs	r1, #1
 80058b6:	6838      	ldr	r0, [r7, #0]
 80058b8:	f000 fb8e 	bl	8005fd8 <prvAddCurrentTaskToDelayedList>
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000920 	.word	0x20000920

080058c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	617b      	str	r3, [r7, #20]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <vTaskPlaceOnEventListRestricted+0x54>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3318      	adds	r3, #24
 80058f6:	4619      	mov	r1, r3
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7fe fc04 	bl	8004106 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295
 8005908:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	68b8      	ldr	r0, [r7, #8]
 800590e:	f000 fb63 	bl	8005fd8 <prvAddCurrentTaskToDelayedList>
	}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000920 	.word	0x20000920

08005920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60fb      	str	r3, [r7, #12]
}
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3318      	adds	r3, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe fc35 	bl	80041c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <xTaskRemoveFromEventList+0xb0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3304      	adds	r3, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fc2c 	bl	80041c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <xTaskRemoveFromEventList+0xb4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <xTaskRemoveFromEventList+0x5c>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <xTaskRemoveFromEventList+0xb4>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <xTaskRemoveFromEventList+0xb8>)
 800598a:	441a      	add	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7fe fbb7 	bl	8004106 <vListInsertEnd>
 8005998:	e005      	b.n	80059a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3318      	adds	r3, #24
 800599e:	4619      	mov	r1, r3
 80059a0:	480e      	ldr	r0, [pc, #56]	; (80059dc <xTaskRemoveFromEventList+0xbc>)
 80059a2:	f7fe fbb0 	bl	8004106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <xTaskRemoveFromEventList+0xc0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d905      	bls.n	80059c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <xTaskRemoveFromEventList+0xc4>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	e001      	b.n	80059c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000e1c 	.word	0x20000e1c
 80059d4:	20000dfc 	.word	0x20000dfc
 80059d8:	20000924 	.word	0x20000924
 80059dc:	20000db4 	.word	0x20000db4
 80059e0:	20000920 	.word	0x20000920
 80059e4:	20000e08 	.word	0x20000e08

080059e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <vTaskInternalSetTimeOutState+0x24>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <vTaskInternalSetTimeOutState+0x28>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	605a      	str	r2, [r3, #4]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	20000e0c 	.word	0x20000e0c
 8005a10:	20000df8 	.word	0x20000df8

08005a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	613b      	str	r3, [r7, #16]
}
 8005a36:	bf00      	nop
 8005a38:	e7fe      	b.n	8005a38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	60fb      	str	r3, [r7, #12]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a56:	f000 ff8d 	bl	8006974 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <xTaskCheckForTimeOut+0xbc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e023      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <xTaskCheckForTimeOut+0xc0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d007      	beq.n	8005a96 <xTaskCheckForTimeOut+0x82>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e015      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d20b      	bcs.n	8005ab8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ff9b 	bl	80059e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	e004      	b.n	8005ac2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ac2:	f000 ff87 	bl	80069d4 <vPortExitCritical>

	return xReturn;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3720      	adds	r7, #32
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000df8 	.word	0x20000df8
 8005ad4:	20000e0c 	.word	0x20000e0c

08005ad8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005adc:	4b03      	ldr	r3, [pc, #12]	; (8005aec <vTaskMissedYield+0x14>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000e08 	.word	0x20000e08

08005af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005af8:	f000 f852 	bl	8005ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <prvIdleTask+0x28>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d9f9      	bls.n	8005af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <prvIdleTask+0x2c>)
 8005b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b14:	e7f0      	b.n	8005af8 <prvIdleTask+0x8>
 8005b16:	bf00      	nop
 8005b18:	20000924 	.word	0x20000924
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b26:	2300      	movs	r3, #0
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	e00c      	b.n	8005b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <prvInitialiseTaskLists+0x60>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe fab6 	bl	80040ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3301      	adds	r3, #1
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b37      	cmp	r3, #55	; 0x37
 8005b4a:	d9ef      	bls.n	8005b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b4c:	480d      	ldr	r0, [pc, #52]	; (8005b84 <prvInitialiseTaskLists+0x64>)
 8005b4e:	f7fe faad 	bl	80040ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b52:	480d      	ldr	r0, [pc, #52]	; (8005b88 <prvInitialiseTaskLists+0x68>)
 8005b54:	f7fe faaa 	bl	80040ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b58:	480c      	ldr	r0, [pc, #48]	; (8005b8c <prvInitialiseTaskLists+0x6c>)
 8005b5a:	f7fe faa7 	bl	80040ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b5e:	480c      	ldr	r0, [pc, #48]	; (8005b90 <prvInitialiseTaskLists+0x70>)
 8005b60:	f7fe faa4 	bl	80040ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b64:	480b      	ldr	r0, [pc, #44]	; (8005b94 <prvInitialiseTaskLists+0x74>)
 8005b66:	f7fe faa1 	bl	80040ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <prvInitialiseTaskLists+0x78>)
 8005b6c:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <prvInitialiseTaskLists+0x64>)
 8005b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <prvInitialiseTaskLists+0x7c>)
 8005b72:	4a05      	ldr	r2, [pc, #20]	; (8005b88 <prvInitialiseTaskLists+0x68>)
 8005b74:	601a      	str	r2, [r3, #0]
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000924 	.word	0x20000924
 8005b84:	20000d84 	.word	0x20000d84
 8005b88:	20000d98 	.word	0x20000d98
 8005b8c:	20000db4 	.word	0x20000db4
 8005b90:	20000dc8 	.word	0x20000dc8
 8005b94:	20000de0 	.word	0x20000de0
 8005b98:	20000dac 	.word	0x20000dac
 8005b9c:	20000db0 	.word	0x20000db0

08005ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ba6:	e019      	b.n	8005bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ba8:	f000 fee4 	bl	8006974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <prvCheckTasksWaitingTermination+0x50>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fb01 	bl	80041c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <prvCheckTasksWaitingTermination+0x54>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	4a0b      	ldr	r2, [pc, #44]	; (8005bf4 <prvCheckTasksWaitingTermination+0x54>)
 8005bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bd2:	f000 feff 	bl	80069d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f810 	bl	8005bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <prvCheckTasksWaitingTermination+0x58>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e1      	bne.n	8005ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000dc8 	.word	0x20000dc8
 8005bf4:	20000df4 	.word	0x20000df4
 8005bf8:	20000ddc 	.word	0x20000ddc

08005bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3354      	adds	r3, #84	; 0x54
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f9c7 	bl	8006f9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d108      	bne.n	8005c2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 f897 	bl	8006d50 <vPortFree>
				vPortFree( pxTCB );
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 f894 	bl	8006d50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c28:	e018      	b.n	8005c5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d103      	bne.n	8005c3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 f88b 	bl	8006d50 <vPortFree>
	}
 8005c3a:	e00f      	b.n	8005c5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d00a      	beq.n	8005c5c <prvDeleteTCB+0x60>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <prvDeleteTCB+0x5e>
	}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <prvResetNextTaskUnblockTime+0x38>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c76:	f04f 32ff 	mov.w	r2, #4294967295
 8005c7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c7c:	e008      	b.n	8005c90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <prvResetNextTaskUnblockTime+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	20000dac 	.word	0x20000dac
 8005ca0:	20000e14 	.word	0x20000e14

08005ca4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005cb0:	687b      	ldr	r3, [r7, #4]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000920 	.word	0x20000920

08005cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <xTaskGetSchedulerState+0x34>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	e008      	b.n	8005cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd8:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <xTaskGetSchedulerState+0x38>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	e001      	b.n	8005cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cea:	687b      	ldr	r3, [r7, #4]
	}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000e00 	.word	0x20000e00
 8005cfc:	20000e1c 	.word	0x20000e1c

08005d00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d051      	beq.n	8005dba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	4b2a      	ldr	r3, [pc, #168]	; (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d241      	bcs.n	8005da8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	db06      	blt.n	8005d3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	6959      	ldr	r1, [r3, #20]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <xTaskPriorityInherit+0xc8>)
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	d122      	bne.n	8005d98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fa32 	bl	80041c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d5c:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6a:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <xTaskPriorityInherit+0xcc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d903      	bls.n	8005d7a <xTaskPriorityInherit+0x7a>
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d76:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <xTaskPriorityInherit+0xcc>)
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a10      	ldr	r2, [pc, #64]	; (8005dc8 <xTaskPriorityInherit+0xc8>)
 8005d88:	441a      	add	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fe f9b8 	bl	8004106 <vListInsertEnd>
 8005d96:	e004      	b.n	8005da2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e008      	b.n	8005dba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dac:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <xTaskPriorityInherit+0xc4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d201      	bcs.n	8005dba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dba:	68fb      	ldr	r3, [r7, #12]
	}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000920 	.word	0x20000920
 8005dc8:	20000924 	.word	0x20000924
 8005dcc:	20000dfc 	.word	0x20000dfc

08005dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d056      	beq.n	8005e94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005de6:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <xTaskPriorityDisinherit+0xd0>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d00a      	beq.n	8005e06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60fb      	str	r3, [r7, #12]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	60bb      	str	r3, [r7, #8]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	1e5a      	subs	r2, r3, #1
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d02c      	beq.n	8005e94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d128      	bne.n	8005e94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe f9ba 	bl	80041c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <xTaskPriorityDisinherit+0xd4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d903      	bls.n	8005e74 <xTaskPriorityDisinherit+0xa4>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <xTaskPriorityDisinherit+0xd4>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <xTaskPriorityDisinherit+0xd8>)
 8005e82:	441a      	add	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe f93b 	bl	8004106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e94:	697b      	ldr	r3, [r7, #20]
	}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000920 	.word	0x20000920
 8005ea4:	20000dfc 	.word	0x20000dfc
 8005ea8:	20000924 	.word	0x20000924

08005eac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d06a      	beq.n	8005f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60fb      	str	r3, [r7, #12]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d902      	bls.n	8005ef2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	e002      	b.n	8005ef8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ef6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d04b      	beq.n	8005f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d146      	bne.n	8005f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f0c:	4b25      	ldr	r3, [pc, #148]	; (8005fa4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d10a      	bne.n	8005f2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	db04      	blt.n	8005f4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	6959      	ldr	r1, [r3, #20]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f5a:	4413      	add	r3, r2
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	d11c      	bne.n	8005f9a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe f92b 	bl	80041c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d903      	bls.n	8005f7e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4a07      	ldr	r2, [pc, #28]	; (8005fa8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f8c:	441a      	add	r2, r3
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7fe f8b6 	bl	8004106 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f9a:	bf00      	nop
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000920 	.word	0x20000920
 8005fa8:	20000924 	.word	0x20000924
 8005fac:	20000dfc 	.word	0x20000dfc

08005fb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fc2:	3201      	adds	r2, #1
 8005fc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005fc6:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
	}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	20000920 	.word	0x20000920

08005fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fe2:	4b21      	ldr	r3, [pc, #132]	; (8006068 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe8:	4b20      	ldr	r3, [pc, #128]	; (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe f8e6 	bl	80041c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d10a      	bne.n	8006012 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006002:	4b1a      	ldr	r3, [pc, #104]	; (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4819      	ldr	r0, [pc, #100]	; (8006070 <prvAddCurrentTaskToDelayedList+0x98>)
 800600c:	f7fe f87b 	bl	8004106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006010:	e026      	b.n	8006060 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	429a      	cmp	r2, r3
 8006028:	d209      	bcs.n	800603e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602a:	4b12      	ldr	r3, [pc, #72]	; (8006074 <prvAddCurrentTaskToDelayedList+0x9c>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe f889 	bl	800414e <vListInsert>
}
 800603c:	e010      	b.n	8006060 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603e:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f7fe f87f 	bl	800414e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	d202      	bcs.n	8006060 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800605a:	4a08      	ldr	r2, [pc, #32]	; (800607c <prvAddCurrentTaskToDelayedList+0xa4>)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6013      	str	r3, [r2, #0]
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000df8 	.word	0x20000df8
 800606c:	20000920 	.word	0x20000920
 8006070:	20000de0 	.word	0x20000de0
 8006074:	20000db0 	.word	0x20000db0
 8006078:	20000dac 	.word	0x20000dac
 800607c:	20000e14 	.word	0x20000e14

08006080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800608a:	f000 fb07 	bl	800669c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <xTimerCreateTimerTask+0x80>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d021      	beq.n	80060da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800609e:	1d3a      	adds	r2, r7, #4
 80060a0:	f107 0108 	add.w	r1, r7, #8
 80060a4:	f107 030c 	add.w	r3, r7, #12
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fd ffe5 	bl	8004078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	9202      	str	r2, [sp, #8]
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	2302      	movs	r3, #2
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2300      	movs	r3, #0
 80060be:	460a      	mov	r2, r1
 80060c0:	4910      	ldr	r1, [pc, #64]	; (8006104 <xTimerCreateTimerTask+0x84>)
 80060c2:	4811      	ldr	r0, [pc, #68]	; (8006108 <xTimerCreateTimerTask+0x88>)
 80060c4:	f7fe ffa6 	bl	8005014 <xTaskCreateStatic>
 80060c8:	4603      	mov	r3, r0
 80060ca:	4a10      	ldr	r2, [pc, #64]	; (800610c <xTimerCreateTimerTask+0x8c>)
 80060cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <xTimerCreateTimerTask+0x8c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060d6:	2301      	movs	r3, #1
 80060d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060f6:	697b      	ldr	r3, [r7, #20]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20000e50 	.word	0x20000e50
 8006104:	080071a0 	.word	0x080071a0
 8006108:	08006245 	.word	0x08006245
 800610c:	20000e54 	.word	0x20000e54

08006110 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800611e:	2300      	movs	r3, #0
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	623b      	str	r3, [r7, #32]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <xTimerGenericCommand+0x98>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d02a      	beq.n	800619c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b05      	cmp	r3, #5
 8006156:	dc18      	bgt.n	800618a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006158:	f7ff fdb4 	bl	8005cc4 <xTaskGetSchedulerState>
 800615c:	4603      	mov	r3, r0
 800615e:	2b02      	cmp	r3, #2
 8006160:	d109      	bne.n	8006176 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <xTimerGenericCommand+0x98>)
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f107 0110 	add.w	r1, r7, #16
 800616a:	2300      	movs	r3, #0
 800616c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616e:	f7fe fa45 	bl	80045fc <xQueueGenericSend>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24
 8006174:	e012      	b.n	800619c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <xTimerGenericCommand+0x98>)
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f107 0110 	add.w	r1, r7, #16
 800617e:	2300      	movs	r3, #0
 8006180:	2200      	movs	r2, #0
 8006182:	f7fe fa3b 	bl	80045fc <xQueueGenericSend>
 8006186:	6278      	str	r0, [r7, #36]	; 0x24
 8006188:	e008      	b.n	800619c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800618a:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <xTimerGenericCommand+0x98>)
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	f107 0110 	add.w	r1, r7, #16
 8006192:	2300      	movs	r3, #0
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	f7fe fb2f 	bl	80047f8 <xQueueGenericSendFromISR>
 800619a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000e50 	.word	0x20000e50

080061ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b6:	4b22      	ldr	r3, [pc, #136]	; (8006240 <prvProcessExpiredTimer+0x94>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fd fffb 	bl	80041c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d022      	beq.n	800621e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	18d1      	adds	r1, r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	6978      	ldr	r0, [r7, #20]
 80061e6:	f000 f8d1 	bl	800638c <prvInsertTimerInActiveList>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01f      	beq.n	8006230 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f0:	2300      	movs	r3, #0
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	2100      	movs	r1, #0
 80061fa:	6978      	ldr	r0, [r7, #20]
 80061fc:	f7ff ff88 	bl	8006110 <xTimerGenericCommand>
 8006200:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d113      	bne.n	8006230 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	6978      	ldr	r0, [r7, #20]
 8006236:	4798      	blx	r3
}
 8006238:	bf00      	nop
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000e48 	.word	0x20000e48

08006244 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800624c:	f107 0308 	add.w	r3, r7, #8
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f857 	bl	8006304 <prvGetNextExpireTime>
 8006256:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4619      	mov	r1, r3
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f803 	bl	8006268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006262:	f000 f8d5 	bl	8006410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006266:	e7f1      	b.n	800624c <prvTimerTask+0x8>

08006268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006272:	f7ff f92b 	bl	80054cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006276:	f107 0308 	add.w	r3, r7, #8
 800627a:	4618      	mov	r0, r3
 800627c:	f000 f866 	bl	800634c <prvSampleTimeNow>
 8006280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d130      	bne.n	80062ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <prvProcessTimerOrBlockTask+0x3c>
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	429a      	cmp	r2, r3
 8006294:	d806      	bhi.n	80062a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006296:	f7ff f927 	bl	80054e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff ff85 	bl	80061ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062a2:	e024      	b.n	80062ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <prvProcessTimerOrBlockTask+0x90>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <prvProcessTimerOrBlockTask+0x50>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <prvProcessTimerOrBlockTask+0x52>
 80062b8:	2300      	movs	r3, #0
 80062ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <prvProcessTimerOrBlockTask+0x94>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fe fe6f 	bl	8004fac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ce:	f7ff f90b 	bl	80054e8 <xTaskResumeAll>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <prvProcessTimerOrBlockTask+0x98>)
 80062da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	f3bf 8f6f 	isb	sy
}
 80062e8:	e001      	b.n	80062ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062ea:	f7ff f8fd 	bl	80054e8 <xTaskResumeAll>
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000e4c 	.word	0x20000e4c
 80062fc:	20000e50 	.word	0x20000e50
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <prvGetNextExpireTime+0x44>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <prvGetNextExpireTime+0x16>
 8006316:	2201      	movs	r2, #1
 8006318:	e000      	b.n	800631c <prvGetNextExpireTime+0x18>
 800631a:	2200      	movs	r2, #0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <prvGetNextExpireTime+0x44>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e001      	b.n	8006338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006338:	68fb      	ldr	r3, [r7, #12]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000e48 	.word	0x20000e48

0800634c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006354:	f7ff f966 	bl	8005624 <xTaskGetTickCount>
 8006358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800635a:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <prvSampleTimeNow+0x3c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	429a      	cmp	r2, r3
 8006362:	d205      	bcs.n	8006370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006364:	f000 f936 	bl	80065d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e002      	b.n	8006376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006376:	4a04      	ldr	r2, [pc, #16]	; (8006388 <prvSampleTimeNow+0x3c>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800637c:	68fb      	ldr	r3, [r7, #12]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000e58 	.word	0x20000e58

0800638c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d812      	bhi.n	80063d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d302      	bcc.n	80063c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e01b      	b.n	80063fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <prvInsertTimerInActiveList+0x7c>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3304      	adds	r3, #4
 80063ce:	4619      	mov	r1, r3
 80063d0:	4610      	mov	r0, r2
 80063d2:	f7fd febc 	bl	800414e <vListInsert>
 80063d6:	e012      	b.n	80063fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d206      	bcs.n	80063ee <prvInsertTimerInActiveList+0x62>
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d302      	bcc.n	80063ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e007      	b.n	80063fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063ee:	4b07      	ldr	r3, [pc, #28]	; (800640c <prvInsertTimerInActiveList+0x80>)
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4619      	mov	r1, r3
 80063f8:	4610      	mov	r0, r2
 80063fa:	f7fd fea8 	bl	800414e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063fe:	697b      	ldr	r3, [r7, #20]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000e4c 	.word	0x20000e4c
 800640c:	20000e48 	.word	0x20000e48

08006410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08e      	sub	sp, #56	; 0x38
 8006414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006416:	e0ca      	b.n	80065ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da18      	bge.n	8006450 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800641e:	1d3b      	adds	r3, r7, #4
 8006420:	3304      	adds	r3, #4
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006446:	6850      	ldr	r0, [r2, #4]
 8006448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644a:	6892      	ldr	r2, [r2, #8]
 800644c:	4611      	mov	r1, r2
 800644e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f2c0 80ab 	blt.w	80065ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	3304      	adds	r3, #4
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd fea9 	bl	80041c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800646e:	463b      	mov	r3, r7
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff ff6b 	bl	800634c <prvSampleTimeNow>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b09      	cmp	r3, #9
 800647c:	f200 8096 	bhi.w	80065ac <prvProcessReceivedCommands+0x19c>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <prvProcessReceivedCommands+0x78>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b1 	.word	0x080064b1
 8006494:	08006525 	.word	0x08006525
 8006498:	08006539 	.word	0x08006539
 800649c:	08006583 	.word	0x08006583
 80064a0:	080064b1 	.word	0x080064b1
 80064a4:	080064b1 	.word	0x080064b1
 80064a8:	08006525 	.word	0x08006525
 80064ac:	08006539 	.word	0x08006539
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	18d1      	adds	r1, r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d0:	f7ff ff5c 	bl	800638c <prvInsertTimerInActiveList>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d069      	beq.n	80065ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d05e      	beq.n	80065ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	441a      	add	r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	2300      	movs	r3, #0
 80064fe:	2100      	movs	r1, #0
 8006500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006502:	f7ff fe05 	bl	8006110 <xTimerGenericCommand>
 8006506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d14f      	bne.n	80065ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	61bb      	str	r3, [r7, #24]
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	b2da      	uxtb	r2, r3
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006536:	e03a      	b.n	80065ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	b2da      	uxtb	r2, r3
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	617b      	str	r3, [r7, #20]
}
 800656a:	bf00      	nop
 800656c:	e7fe      	b.n	800656c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	18d1      	adds	r1, r2, r3
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657c:	f7ff ff06 	bl	800638c <prvInsertTimerInActiveList>
					break;
 8006580:	e015      	b.n	80065ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006592:	f000 fbdd 	bl	8006d50 <vPortFree>
 8006596:	e00a      	b.n	80065ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065aa:	e000      	b.n	80065ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80065ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <prvProcessReceivedCommands+0x1c0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	1d39      	adds	r1, r7, #4
 80065b4:	2200      	movs	r2, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe f9ba 	bl	8004930 <xQueueReceive>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f47f af2a 	bne.w	8006418 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	3730      	adds	r7, #48	; 0x30
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000e50 	.word	0x20000e50

080065d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065da:	e048      	b.n	800666e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <prvSwitchTimerLists+0xc0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e6:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <prvSwitchTimerLists+0xc0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fd fde3 	bl	80041c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02e      	beq.n	800666e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	429a      	cmp	r2, r3
 8006620:	d90e      	bls.n	8006640 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800662e:	4b19      	ldr	r3, [pc, #100]	; (8006694 <prvSwitchTimerLists+0xc0>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3304      	adds	r3, #4
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fd fd88 	bl	800414e <vListInsert>
 800663e:	e016      	b.n	800666e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006640:	2300      	movs	r3, #0
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	2100      	movs	r1, #0
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fd60 	bl	8006110 <xTimerGenericCommand>
 8006650:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	603b      	str	r3, [r7, #0]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <prvSwitchTimerLists+0xc0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1b1      	bne.n	80065dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <prvSwitchTimerLists+0xc0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <prvSwitchTimerLists+0xc4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a04      	ldr	r2, [pc, #16]	; (8006694 <prvSwitchTimerLists+0xc0>)
 8006684:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006686:	4a04      	ldr	r2, [pc, #16]	; (8006698 <prvSwitchTimerLists+0xc4>)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	6013      	str	r3, [r2, #0]
}
 800668c:	bf00      	nop
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20000e48 	.word	0x20000e48
 8006698:	20000e4c 	.word	0x20000e4c

0800669c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066a2:	f000 f967 	bl	8006974 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <prvCheckForValidListAndQueue+0x60>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d120      	bne.n	80066f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ae:	4814      	ldr	r0, [pc, #80]	; (8006700 <prvCheckForValidListAndQueue+0x64>)
 80066b0:	f7fd fcfc 	bl	80040ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066b4:	4813      	ldr	r0, [pc, #76]	; (8006704 <prvCheckForValidListAndQueue+0x68>)
 80066b6:	f7fd fcf9 	bl	80040ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <prvCheckForValidListAndQueue+0x6c>)
 80066bc:	4a10      	ldr	r2, [pc, #64]	; (8006700 <prvCheckForValidListAndQueue+0x64>)
 80066be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066c0:	4b12      	ldr	r3, [pc, #72]	; (800670c <prvCheckForValidListAndQueue+0x70>)
 80066c2:	4a10      	ldr	r2, [pc, #64]	; (8006704 <prvCheckForValidListAndQueue+0x68>)
 80066c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066c6:	2300      	movs	r3, #0
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <prvCheckForValidListAndQueue+0x74>)
 80066cc:	4a11      	ldr	r2, [pc, #68]	; (8006714 <prvCheckForValidListAndQueue+0x78>)
 80066ce:	2110      	movs	r1, #16
 80066d0:	200a      	movs	r0, #10
 80066d2:	f7fd fe07 	bl	80042e4 <xQueueGenericCreateStatic>
 80066d6:	4603      	mov	r3, r0
 80066d8:	4a08      	ldr	r2, [pc, #32]	; (80066fc <prvCheckForValidListAndQueue+0x60>)
 80066da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <prvCheckForValidListAndQueue+0x60>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <prvCheckForValidListAndQueue+0x60>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	490b      	ldr	r1, [pc, #44]	; (8006718 <prvCheckForValidListAndQueue+0x7c>)
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe fc34 	bl	8004f58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066f0:	f000 f970 	bl	80069d4 <vPortExitCritical>
}
 80066f4:	bf00      	nop
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000e50 	.word	0x20000e50
 8006700:	20000e20 	.word	0x20000e20
 8006704:	20000e34 	.word	0x20000e34
 8006708:	20000e48 	.word	0x20000e48
 800670c:	20000e4c 	.word	0x20000e4c
 8006710:	20000efc 	.word	0x20000efc
 8006714:	20000e5c 	.word	0x20000e5c
 8006718:	080071a8 	.word	0x080071a8

0800671c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	3b04      	subs	r3, #4
 800672c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3b04      	subs	r3, #4
 800673a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f023 0201 	bic.w	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3b04      	subs	r3, #4
 800674a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800674c:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <pxPortInitialiseStack+0x64>)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3b14      	subs	r3, #20
 8006756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3b04      	subs	r3, #4
 8006762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f06f 0202 	mvn.w	r2, #2
 800676a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3b20      	subs	r3, #32
 8006770:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006772:	68fb      	ldr	r3, [r7, #12]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	08006785 	.word	0x08006785

08006784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <prvTaskExitError+0x54>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006796:	d00a      	beq.n	80067ae <prvTaskExitError+0x2a>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <prvTaskExitError+0x28>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60bb      	str	r3, [r7, #8]
}
 80067c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067c2:	bf00      	nop
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0fc      	beq.n	80067c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	2000000c 	.word	0x2000000c
 80067dc:	00000000 	.word	0x00000000

080067e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <pxCurrentTCBConst2>)
 80067e2:	6819      	ldr	r1, [r3, #0]
 80067e4:	6808      	ldr	r0, [r1, #0]
 80067e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	f380 8809 	msr	PSP, r0
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8811 	msr	BASEPRI, r0
 80067fa:	4770      	bx	lr
 80067fc:	f3af 8000 	nop.w

08006800 <pxCurrentTCBConst2>:
 8006800:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop

08006808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006808:	4808      	ldr	r0, [pc, #32]	; (800682c <prvPortStartFirstTask+0x24>)
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	6800      	ldr	r0, [r0, #0]
 800680e:	f380 8808 	msr	MSP, r0
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8814 	msr	CONTROL, r0
 800681a:	b662      	cpsie	i
 800681c:	b661      	cpsie	f
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	df00      	svc	0
 8006828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800682a:	bf00      	nop
 800682c:	e000ed08 	.word	0xe000ed08

08006830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006836:	4b46      	ldr	r3, [pc, #280]	; (8006950 <xPortStartScheduler+0x120>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a46      	ldr	r2, [pc, #280]	; (8006954 <xPortStartScheduler+0x124>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d10a      	bne.n	8006856 <xPortStartScheduler+0x26>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	613b      	str	r3, [r7, #16]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006856:	4b3e      	ldr	r3, [pc, #248]	; (8006950 <xPortStartScheduler+0x120>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a3f      	ldr	r2, [pc, #252]	; (8006958 <xPortStartScheduler+0x128>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10a      	bne.n	8006876 <xPortStartScheduler+0x46>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fb      	str	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006876:	4b39      	ldr	r3, [pc, #228]	; (800695c <xPortStartScheduler+0x12c>)
 8006878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006890:	78fb      	ldrb	r3, [r7, #3]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006898:	b2da      	uxtb	r2, r3
 800689a:	4b31      	ldr	r3, [pc, #196]	; (8006960 <xPortStartScheduler+0x130>)
 800689c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800689e:	4b31      	ldr	r3, [pc, #196]	; (8006964 <xPortStartScheduler+0x134>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068a4:	e009      	b.n	80068ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068a6:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <xPortStartScheduler+0x134>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <xPortStartScheduler+0x134>)
 80068ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d0ef      	beq.n	80068a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068c6:	4b27      	ldr	r3, [pc, #156]	; (8006964 <xPortStartScheduler+0x134>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f1c3 0307 	rsb	r3, r3, #7
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d00a      	beq.n	80068e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60bb      	str	r3, [r7, #8]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068e8:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <xPortStartScheduler+0x134>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <xPortStartScheduler+0x134>)
 80068f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068f2:	4b1c      	ldr	r3, [pc, #112]	; (8006964 <xPortStartScheduler+0x134>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068fa:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <xPortStartScheduler+0x134>)
 80068fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006906:	4b18      	ldr	r3, [pc, #96]	; (8006968 <xPortStartScheduler+0x138>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <xPortStartScheduler+0x138>)
 800690c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <xPortStartScheduler+0x138>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a14      	ldr	r2, [pc, #80]	; (8006968 <xPortStartScheduler+0x138>)
 8006918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800691c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800691e:	f000 f8dd 	bl	8006adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <xPortStartScheduler+0x13c>)
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006928:	f000 f8fc 	bl	8006b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800692c:	4b10      	ldr	r3, [pc, #64]	; (8006970 <xPortStartScheduler+0x140>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a0f      	ldr	r2, [pc, #60]	; (8006970 <xPortStartScheduler+0x140>)
 8006932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006938:	f7ff ff66 	bl	8006808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800693c:	f7fe ff3c 	bl	80057b8 <vTaskSwitchContext>
	prvTaskExitError();
 8006940:	f7ff ff20 	bl	8006784 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000ed00 	.word	0xe000ed00
 8006954:	410fc271 	.word	0x410fc271
 8006958:	410fc270 	.word	0x410fc270
 800695c:	e000e400 	.word	0xe000e400
 8006960:	20000f4c 	.word	0x20000f4c
 8006964:	20000f50 	.word	0x20000f50
 8006968:	e000ed20 	.word	0xe000ed20
 800696c:	2000000c 	.word	0x2000000c
 8006970:	e000ef34 	.word	0xe000ef34

08006974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	607b      	str	r3, [r7, #4]
}
 800698c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <vPortEnterCritical+0x58>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3301      	adds	r3, #1
 8006994:	4a0d      	ldr	r2, [pc, #52]	; (80069cc <vPortEnterCritical+0x58>)
 8006996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <vPortEnterCritical+0x58>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10f      	bne.n	80069c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <vPortEnterCritical+0x5c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	603b      	str	r3, [r7, #0]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <vPortEnterCritical+0x4a>
	}
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069da:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <vPortExitCritical+0x50>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <vPortExitCritical+0x24>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	607b      	str	r3, [r7, #4]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069f8:	4b0a      	ldr	r3, [pc, #40]	; (8006a24 <vPortExitCritical+0x50>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <vPortExitCritical+0x50>)
 8006a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a02:	4b08      	ldr	r3, [pc, #32]	; (8006a24 <vPortExitCritical+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d105      	bne.n	8006a16 <vPortExitCritical+0x42>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f383 8811 	msr	BASEPRI, r3
}
 8006a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	2000000c 	.word	0x2000000c
	...

08006a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a30:	f3ef 8009 	mrs	r0, PSP
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <pxCurrentTCBConst>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f01e 0f10 	tst.w	lr, #16
 8006a40:	bf08      	it	eq
 8006a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4a:	6010      	str	r0, [r2, #0]
 8006a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a54:	f380 8811 	msr	BASEPRI, r0
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f7fe feaa 	bl	80057b8 <vTaskSwitchContext>
 8006a64:	f04f 0000 	mov.w	r0, #0
 8006a68:	f380 8811 	msr	BASEPRI, r0
 8006a6c:	bc09      	pop	{r0, r3}
 8006a6e:	6819      	ldr	r1, [r3, #0]
 8006a70:	6808      	ldr	r0, [r1, #0]
 8006a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a76:	f01e 0f10 	tst.w	lr, #16
 8006a7a:	bf08      	it	eq
 8006a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a80:	f380 8809 	msr	PSP, r0
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	f3af 8000 	nop.w

08006a90 <pxCurrentTCBConst>:
 8006a90:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab2:	f7fe fdc7 	bl	8005644 <xTaskIncrementTick>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <xPortSysTickHandler+0x40>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	f383 8811 	msr	BASEPRI, r3
}
 8006ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <vPortSetupTimerInterrupt+0x34>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <vPortSetupTimerInterrupt+0x38>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <vPortSetupTimerInterrupt+0x3c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <vPortSetupTimerInterrupt+0x40>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <vPortSetupTimerInterrupt+0x44>)
 8006afa:	3b01      	subs	r3, #1
 8006afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006afe:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <vPortSetupTimerInterrupt+0x34>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	e000e010 	.word	0xe000e010
 8006b14:	e000e018 	.word	0xe000e018
 8006b18:	20000000 	.word	0x20000000
 8006b1c:	10624dd3 	.word	0x10624dd3
 8006b20:	e000e014 	.word	0xe000e014

08006b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b34 <vPortEnableVFP+0x10>
 8006b28:	6801      	ldr	r1, [r0, #0]
 8006b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b2e:	6001      	str	r1, [r0, #0]
 8006b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b32:	bf00      	nop
 8006b34:	e000ed88 	.word	0xe000ed88

08006b38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b3e:	f3ef 8305 	mrs	r3, IPSR
 8006b42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d914      	bls.n	8006b74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <vPortValidateInterruptPriority+0x70>)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b54:	4b15      	ldr	r3, [pc, #84]	; (8006bac <vPortValidateInterruptPriority+0x74>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	7afa      	ldrb	r2, [r7, #11]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d20a      	bcs.n	8006b74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	607b      	str	r3, [r7, #4]
}
 8006b70:	bf00      	nop
 8006b72:	e7fe      	b.n	8006b72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <vPortValidateInterruptPriority+0x78>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b7c:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <vPortValidateInterruptPriority+0x7c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d90a      	bls.n	8006b9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	603b      	str	r3, [r7, #0]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <vPortValidateInterruptPriority+0x60>
	}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	e000e3f0 	.word	0xe000e3f0
 8006bac:	20000f4c 	.word	0x20000f4c
 8006bb0:	e000ed0c 	.word	0xe000ed0c
 8006bb4:	20000f50 	.word	0x20000f50

08006bb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	; 0x28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bc4:	f7fe fc82 	bl	80054cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bc8:	4b5b      	ldr	r3, [pc, #364]	; (8006d38 <pvPortMalloc+0x180>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bd0:	f000 f920 	bl	8006e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bd4:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <pvPortMalloc+0x184>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 8093 	bne.w	8006d08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01d      	beq.n	8006c24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006be8:	2208      	movs	r2, #8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d014      	beq.n	8006c24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f023 0307 	bic.w	r3, r3, #7
 8006c00:	3308      	adds	r3, #8
 8006c02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <pvPortMalloc+0x6c>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	617b      	str	r3, [r7, #20]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d06e      	beq.n	8006d08 <pvPortMalloc+0x150>
 8006c2a:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <pvPortMalloc+0x188>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d869      	bhi.n	8006d08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c34:	4b43      	ldr	r3, [pc, #268]	; (8006d44 <pvPortMalloc+0x18c>)
 8006c36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c38:	4b42      	ldr	r3, [pc, #264]	; (8006d44 <pvPortMalloc+0x18c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c3e:	e004      	b.n	8006c4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d903      	bls.n	8006c5c <pvPortMalloc+0xa4>
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1f1      	bne.n	8006c40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c5c:	4b36      	ldr	r3, [pc, #216]	; (8006d38 <pvPortMalloc+0x180>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d050      	beq.n	8006d08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	1ad2      	subs	r2, r2, r3
 8006c80:	2308      	movs	r3, #8
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d91f      	bls.n	8006cc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <pvPortMalloc+0xf8>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	613b      	str	r3, [r7, #16]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	1ad2      	subs	r2, r2, r3
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cc2:	69b8      	ldr	r0, [r7, #24]
 8006cc4:	f000 f908 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <pvPortMalloc+0x188>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	4a1b      	ldr	r2, [pc, #108]	; (8006d40 <pvPortMalloc+0x188>)
 8006cd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <pvPortMalloc+0x188>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <pvPortMalloc+0x190>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d203      	bcs.n	8006cea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ce2:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <pvPortMalloc+0x188>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <pvPortMalloc+0x190>)
 8006ce8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <pvPortMalloc+0x184>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cfe:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <pvPortMalloc+0x194>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <pvPortMalloc+0x194>)
 8006d06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d08:	f7fe fbee 	bl	80054e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <pvPortMalloc+0x174>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60fb      	str	r3, [r7, #12]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <pvPortMalloc+0x172>
	return pvReturn;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3728      	adds	r7, #40	; 0x28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20004b5c 	.word	0x20004b5c
 8006d3c:	20004b70 	.word	0x20004b70
 8006d40:	20004b60 	.word	0x20004b60
 8006d44:	20004b54 	.word	0x20004b54
 8006d48:	20004b64 	.word	0x20004b64
 8006d4c:	20004b68 	.word	0x20004b68

08006d50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d04d      	beq.n	8006dfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d62:	2308      	movs	r3, #8
 8006d64:	425b      	negs	r3, r3
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	4413      	add	r3, r2
 8006d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <vPortFree+0xb8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <vPortFree+0x44>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60fb      	str	r3, [r7, #12]
}
 8006d90:	bf00      	nop
 8006d92:	e7fe      	b.n	8006d92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <vPortFree+0x62>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	60bb      	str	r3, [r7, #8]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <vPortFree+0xb8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01e      	beq.n	8006dfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d11a      	bne.n	8006dfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	; (8006e08 <vPortFree+0xb8>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dd8:	f7fe fb78 	bl	80054cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <vPortFree+0xbc>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4413      	add	r3, r2
 8006de6:	4a09      	ldr	r2, [pc, #36]	; (8006e0c <vPortFree+0xbc>)
 8006de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f000 f874 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vPortFree+0xc0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3301      	adds	r3, #1
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <vPortFree+0xc0>)
 8006df8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dfa:	f7fe fb75 	bl	80054e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dfe:	bf00      	nop
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20004b70 	.word	0x20004b70
 8006e0c:	20004b60 	.word	0x20004b60
 8006e10:	20004b6c 	.word	0x20004b6c

08006e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <prvHeapInit+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3307      	adds	r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <prvHeapInit+0xac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e60:	2208      	movs	r2, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <prvHeapInit+0xb8>)
 8006ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <prvHeapInit+0xbc>)
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvHeapInit+0xc0>)
 8006eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000f54 	.word	0x20000f54
 8006ec4:	20004b54 	.word	0x20004b54
 8006ec8:	20004b5c 	.word	0x20004b5c
 8006ecc:	20004b64 	.word	0x20004b64
 8006ed0:	20004b60 	.word	0x20004b60
 8006ed4:	20004b70 	.word	0x20004b70

08006ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <prvInsertBlockIntoFreeList+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <prvInsertBlockIntoFreeList+0x14>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8f7      	bhi.n	8006ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d118      	bne.n	8006f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00d      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20004b54 	.word	0x20004b54
 8006f88:	20004b5c 	.word	0x20004b5c

08006f8c <memset>:
 8006f8c:	4402      	add	r2, r0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d100      	bne.n	8006f96 <memset+0xa>
 8006f94:	4770      	bx	lr
 8006f96:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9a:	e7f9      	b.n	8006f90 <memset+0x4>

08006f9c <_reclaim_reent>:
 8006f9c:	4b29      	ldr	r3, [pc, #164]	; (8007044 <_reclaim_reent+0xa8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4283      	cmp	r3, r0
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	d04b      	beq.n	8007040 <_reclaim_reent+0xa4>
 8006fa8:	69c3      	ldr	r3, [r0, #28]
 8006faa:	b143      	cbz	r3, 8006fbe <_reclaim_reent+0x22>
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d144      	bne.n	800703c <_reclaim_reent+0xa0>
 8006fb2:	69e3      	ldr	r3, [r4, #28]
 8006fb4:	6819      	ldr	r1, [r3, #0]
 8006fb6:	b111      	cbz	r1, 8006fbe <_reclaim_reent+0x22>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 f879 	bl	80070b0 <_free_r>
 8006fbe:	6961      	ldr	r1, [r4, #20]
 8006fc0:	b111      	cbz	r1, 8006fc8 <_reclaim_reent+0x2c>
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 f874 	bl	80070b0 <_free_r>
 8006fc8:	69e1      	ldr	r1, [r4, #28]
 8006fca:	b111      	cbz	r1, 8006fd2 <_reclaim_reent+0x36>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 f86f 	bl	80070b0 <_free_r>
 8006fd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006fd4:	b111      	cbz	r1, 8006fdc <_reclaim_reent+0x40>
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f86a 	bl	80070b0 <_free_r>
 8006fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fde:	b111      	cbz	r1, 8006fe6 <_reclaim_reent+0x4a>
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 f865 	bl	80070b0 <_free_r>
 8006fe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006fe8:	b111      	cbz	r1, 8006ff0 <_reclaim_reent+0x54>
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 f860 	bl	80070b0 <_free_r>
 8006ff0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ff2:	b111      	cbz	r1, 8006ffa <_reclaim_reent+0x5e>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 f85b 	bl	80070b0 <_free_r>
 8006ffa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006ffc:	b111      	cbz	r1, 8007004 <_reclaim_reent+0x68>
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f856 	bl	80070b0 <_free_r>
 8007004:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007006:	b111      	cbz	r1, 800700e <_reclaim_reent+0x72>
 8007008:	4620      	mov	r0, r4
 800700a:	f000 f851 	bl	80070b0 <_free_r>
 800700e:	6a23      	ldr	r3, [r4, #32]
 8007010:	b1b3      	cbz	r3, 8007040 <_reclaim_reent+0xa4>
 8007012:	4620      	mov	r0, r4
 8007014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007018:	4718      	bx	r3
 800701a:	5949      	ldr	r1, [r1, r5]
 800701c:	b941      	cbnz	r1, 8007030 <_reclaim_reent+0x94>
 800701e:	3504      	adds	r5, #4
 8007020:	69e3      	ldr	r3, [r4, #28]
 8007022:	2d80      	cmp	r5, #128	; 0x80
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	d1f8      	bne.n	800701a <_reclaim_reent+0x7e>
 8007028:	4620      	mov	r0, r4
 800702a:	f000 f841 	bl	80070b0 <_free_r>
 800702e:	e7c0      	b.n	8006fb2 <_reclaim_reent+0x16>
 8007030:	680e      	ldr	r6, [r1, #0]
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f83c 	bl	80070b0 <_free_r>
 8007038:	4631      	mov	r1, r6
 800703a:	e7ef      	b.n	800701c <_reclaim_reent+0x80>
 800703c:	2500      	movs	r5, #0
 800703e:	e7ef      	b.n	8007020 <_reclaim_reent+0x84>
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	bf00      	nop
 8007044:	2000005c 	.word	0x2000005c

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	; (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	; (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	; (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	; (800708c <__libc_init_array+0x44>)
 800705c:	f000 f880 	bl	8007160 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007228 	.word	0x08007228
 8007084:	08007228 	.word	0x08007228
 8007088:	08007228 	.word	0x08007228
 800708c:	0800722c 	.word	0x0800722c

08007090 <__retarget_lock_acquire_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_release_recursive>:
 8007092:	4770      	bx	lr

08007094 <memcpy>:
 8007094:	440a      	add	r2, r1
 8007096:	4291      	cmp	r1, r2
 8007098:	f100 33ff 	add.w	r3, r0, #4294967295
 800709c:	d100      	bne.n	80070a0 <memcpy+0xc>
 800709e:	4770      	bx	lr
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	4291      	cmp	r1, r2
 80070ac:	d1f9      	bne.n	80070a2 <memcpy+0xe>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <_free_r>:
 80070b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070b2:	2900      	cmp	r1, #0
 80070b4:	d044      	beq.n	8007140 <_free_r+0x90>
 80070b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ba:	9001      	str	r0, [sp, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f1a1 0404 	sub.w	r4, r1, #4
 80070c2:	bfb8      	it	lt
 80070c4:	18e4      	addlt	r4, r4, r3
 80070c6:	f000 f83f 	bl	8007148 <__malloc_lock>
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <_free_r+0x94>)
 80070cc:	9801      	ldr	r0, [sp, #4]
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	b933      	cbnz	r3, 80070e0 <_free_r+0x30>
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	6014      	str	r4, [r2, #0]
 80070d6:	b003      	add	sp, #12
 80070d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070dc:	f000 b83a 	b.w	8007154 <__malloc_unlock>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d908      	bls.n	80070f6 <_free_r+0x46>
 80070e4:	6825      	ldr	r5, [r4, #0]
 80070e6:	1961      	adds	r1, r4, r5
 80070e8:	428b      	cmp	r3, r1
 80070ea:	bf01      	itttt	eq
 80070ec:	6819      	ldreq	r1, [r3, #0]
 80070ee:	685b      	ldreq	r3, [r3, #4]
 80070f0:	1949      	addeq	r1, r1, r5
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	e7ed      	b.n	80070d2 <_free_r+0x22>
 80070f6:	461a      	mov	r2, r3
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b10b      	cbz	r3, 8007100 <_free_r+0x50>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d9fa      	bls.n	80070f6 <_free_r+0x46>
 8007100:	6811      	ldr	r1, [r2, #0]
 8007102:	1855      	adds	r5, r2, r1
 8007104:	42a5      	cmp	r5, r4
 8007106:	d10b      	bne.n	8007120 <_free_r+0x70>
 8007108:	6824      	ldr	r4, [r4, #0]
 800710a:	4421      	add	r1, r4
 800710c:	1854      	adds	r4, r2, r1
 800710e:	42a3      	cmp	r3, r4
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	d1e0      	bne.n	80070d6 <_free_r+0x26>
 8007114:	681c      	ldr	r4, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	6053      	str	r3, [r2, #4]
 800711a:	440c      	add	r4, r1
 800711c:	6014      	str	r4, [r2, #0]
 800711e:	e7da      	b.n	80070d6 <_free_r+0x26>
 8007120:	d902      	bls.n	8007128 <_free_r+0x78>
 8007122:	230c      	movs	r3, #12
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	e7d6      	b.n	80070d6 <_free_r+0x26>
 8007128:	6825      	ldr	r5, [r4, #0]
 800712a:	1961      	adds	r1, r4, r5
 800712c:	428b      	cmp	r3, r1
 800712e:	bf04      	itt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	bf04      	itt	eq
 8007138:	1949      	addeq	r1, r1, r5
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6054      	str	r4, [r2, #4]
 800713e:	e7ca      	b.n	80070d6 <_free_r+0x26>
 8007140:	b003      	add	sp, #12
 8007142:	bd30      	pop	{r4, r5, pc}
 8007144:	20004cb0 	.word	0x20004cb0

08007148 <__malloc_lock>:
 8007148:	4801      	ldr	r0, [pc, #4]	; (8007150 <__malloc_lock+0x8>)
 800714a:	f7ff bfa1 	b.w	8007090 <__retarget_lock_acquire_recursive>
 800714e:	bf00      	nop
 8007150:	20004cac 	.word	0x20004cac

08007154 <__malloc_unlock>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__malloc_unlock+0x8>)
 8007156:	f7ff bf9c 	b.w	8007092 <__retarget_lock_release_recursive>
 800715a:	bf00      	nop
 800715c:	20004cac 	.word	0x20004cac

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
